package knife4go
import (
	"os"
)

func init() {

	f, err := FS.OpenFile(CTX, "/chunk-0b510f4b.d676e2ca.js", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = f.Write([] byte(base64Decoding("(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-0b510f4b"],{"576f":function(e,_,t){"use strict";t.d(_,"a",(function(){return n})),t("14d9"),t("d3b7"),t("25f0"),t("a4d3"),t("e01a"),t("a15b"),t("159b"),t("b0c0");var r=t("b1c7");function n(e){var _=[];return null!=e&&null!=e&&(a(_),_.push("## "+e.summary),a(_),_.push("**Url**:`"+e.showUrl+"`"),a(_),_.push("**Method**:`"+e.methodType+"`"),a(_),_.push("**produces**:`"+r.a.toString(e.consumes,"*")+"`"),a(_),_.push("**consumes**:`"+r.a.toString(e.produces,"*")+"`"),a(_),_.push("**description**:"+r.a.toString(e.description,"None")),r.a.checkUndefined(e.requestValue)&&(a(_),_.push("**Sample**:"),a(_),_.push("```javascript"),_.push(e.requestValue),_.push("```")),function(e,_){var t=e.reqParameters;a(_),_.push("**Params**:"),a(_),_.push("**Params**:"),t.length>0?(a(_),_.push("| name | description | in    | require | type | schema |"),_.push("| -------- | -------- | ----- | -------- | -------- | ------ |"),function e(_,t,n){null!=_&&null!=_&&_.length>0&&_.forEach((function(_){_.level=n,t.push("|"+o(_)+"|"+r.a.toString(_.description,"")+"|"+r.a.toString(_.in,"")+"|"+r.a.toString(_.require,"")+"|"+r.a.toString(_.type,"")+"|"+r.a.toString(_.schemaValue,"")+"|"),e(_.children,t,_.level+1)}))}(t,_,1)):(a(_),_.push("None"))}(e,_),function(e,_){r.a.checkUndefined(e.responseCodes)&&e.responseCodes.length>0&&(a(_),_.push("**status**:"),a(_),_.push("| code | description | schema |"),_.push("| -------- | -------- | ----- | "),e.responseCodes.forEach((function(e){_.push("|"+r.a.toString(e.code,"")+"|"+r.a.toString(e.description,"")+"|"+r.a.toString(e.schema,"")+"|")})))}(e,_),function(e,_){if(e.multipartResponseSchema){var t=e.multipCodeDatas;r.a.arrNotEmpty(t)&&t.forEach((function(e){a(_),_.push("**code-"+r.a.toString(e.code,"")+"**:"),s(e,_)}))}else s(e.multipData,_)}(e,_)),_.join("\n")}function a(e){e.push("\n")}function s(e,_){(function(e,_){r.a.checkUndefined(e)&&e.length>0&&(a(_),_.push("**Response Header**:"),a(_),_.push("|name | description | type |"),_.push("| -------- | -------- | ----- | "),e.forEach((function(e){_.push("|"+r.a.toString(e.name,"")+"|"+r.a.toString(e.description,"")+"|"+r.a.toString(e.type,"")+"|")})))})(e.responseHeaderParameters,_),a(_),_.push("**Responses**:"),a(_),r.a.arrNotEmpty(e.data)?(_.push("| name | description | type | schema |"),_.push("| -------- | -------- | ----- |----- | "),e.data.forEach((function(e){e.level=1,_.push("|"+o(e)+"|"+r.a.toString(e.description,"")+"|"+r.a.toString(e.type,"")+"|"+r.a.toString(e.schemaValue,"")+"|"),function e(_,t,n){null!=_&&null!=_&&_.length>0&&_.forEach((function(_){_.level=n,t.push("|"+o(_)+"|"+r.a.toString(_.description,"")+"|"+r.a.toString(_.type,"")+"|"+r.a.toString(_.schemaValue,"")+"|"),e(_.children,t,_.level+1)}))}(e.children,_,e.level+1)}))):_.push("None"),a(_),_.push("**Response Sample**:"),e.responseBasicType?(_.push("```text"),_.push(e.responseText),_.push("```")):(_.push("```javascript"),_.push(e.responseValue),_.push("```"))}function o(e){for(var _=[],t=1;t<e.level;t++)_.push("&emsp;&emsp;");return _.join("")+e.name}},"5a4f":function(e,_,t){},b311:function(e,_,t){
/*!
 * clipboard.js v2.0.11
 * https://clipboardjs.com/
 *
 * Licensed MIT © Zeno Rocha
 */
e.exports=function(){var e={686:function(e,_,t){"use strict";t.d(_,{default:function(){return g}});var r=t(279),n=t.n(r),a=t(370),s=t.n(a),o=t(817),i=t.n(o);function c(e){try{return document.execCommand(e)}catch(e){return!1}}var u=function(e){var _=i()(e);return c("cut"),_},l=function(e,_){var t=function(e){var _="rtl"===document.documentElement.getAttribute("dir"),t=document.createElement("textarea");t.style.fontSize="12pt",t.style.border="0",t.style.padding="0",t.style.margin="0",t.style.position="absolute",t.style[_?"right":"left"]="-9999px";var r=window.pageYOffset||document.documentElement.scrollTop;return t.style.top="".concat(r,"px"),t.setAttribute("readonly",""),t.value=e,t}(e);_.container.appendChild(t);var r=i()(t);return c("copy"),t.remove(),r},p=function(e){var _=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{container:document.body},t="";return"string"==typeof e?t=l(e,_):e instanceof HTMLInputElement&&!["text","search","url","tel","password"].includes(null==e?void 0:e.type)?t=l(e.value,_):(t=i()(e),c("copy")),t};function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var m=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},_=e.action,t=void 0===_?"copy":_,r=e.container,n=e.target,a=e.text;if("copy"!==t&&"cut"!==t)throw new Error('Invalid "action" value, use either "copy" or "cut"');if(void 0!==n){if(!n||"object"!==d(n)||1!==n.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===t&&n.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===t&&(n.hasAttribute("readonly")||n.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes')}return a?p(a,{container:r}):n?"cut"===t?u(n):p(n,{container:r}):void 0};function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,_){for(var t=0;t<_.length;t++){var r=_[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,_){return(E=Object.setPrototypeOf||function(e,_){return e.__proto__=_,e})(e,_)}function P(e){var _=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,r=M(e);if(_){var n=M(this).constructor;t=Reflect.construct(r,arguments,n)}else t=r.apply(this,arguments);return y(this,t)}}function y(e,_){return!_||"object"!==f(_)&&"function"!=typeof _?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):_}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e,_){var t="data-clipboard-".concat(e);if(_.hasAttribute(t))return _.getAttribute(t)}var g=function(e){!function(e,_){if("function"!=typeof _&&null!==_)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(_&&_.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),_&&E(e,_)}(t,e);var _=P(t);function t(e,r){var n;return function(e,_){if(!(e instanceof _))throw new TypeError("Cannot call a class as a function")}(this,t),(n=_.call(this)).resolveOptions(r),n.listenClick(e),n}return function(e,_,t){_&&h(e.prototype,_),t&&h(e,t)}(t,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===f(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var _=this;this.listener=s()(e,"click",(function(e){return _.onClick(e)}))}},{key:"onClick",value:function(e){var _=e.delegateTarget||e.currentTarget,t=this.action(_)||"copy",r=m({action:t,container:this.container,target:this.target(_),text:this.text(_)});this.emit(r?"success":"error",{action:t,text:r,trigger:_,clearSelection:function(){_&&_.focus(),window.getSelection().removeAllRanges()}})}},{key:"defaultAction",value:function(e){return D("action",e)}},{key:"defaultTarget",value:function(e){var _=D("target",e);if(_)return document.querySelector(_)}},{key:"defaultText",value:function(e){return D("text",e)}},{key:"destroy",value:function(){this.listener.destroy()}}],[{key:"copy",value:function(e){var _=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{container:document.body};return p(e,_)}},{key:"cut",value:function(e){return u(e)}},{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],_="string"==typeof e?[e]:e,t=!!document.queryCommandSupported;return _.forEach((function(e){t=t&&!!document.queryCommandSupported(e)})),t}}]),t}(n())},828:function(e){if("undefined"!=typeof Element&&!Element.prototype.matches){var _=Element.prototype;_.matches=_.matchesSelector||_.mozMatchesSelector||_.msMatchesSelector||_.oMatchesSelector||_.webkitMatchesSelector}e.exports=function(e,_){for(;e&&9!==e.nodeType;){if("function"==typeof e.matches&&e.matches(_))return e;e=e.parentNode}}},438:function(e,_,t){var r=t(828);function n(e,_,t,r,n){var s=a.apply(this,arguments);return e.addEventListener(t,s,n),{destroy:function(){e.removeEventListener(t,s,n)}}}function a(e,_,t,n){return function(t){t.delegateTarget=r(t.target,_),t.delegateTarget&&n.call(e,t)}}e.exports=function(e,_,t,r,a){return"function"==typeof e.addEventListener?n.apply(null,arguments):"function"==typeof t?n.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,(function(e){return n(e,_,t,r,a)})))}},879:function(e,_){_.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},_.nodeList=function(e){var t=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===t||"[object HTMLCollection]"===t)&&"length"in e&&(0===e.length||_.node(e[0]))},_.string=function(e){return"string"==typeof e||e instanceof String},_.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},370:function(e,_,t){var r=t(879),n=t(438);e.exports=function(e,_,t){if(!e&&!_&&!t)throw new Error("Missing required arguments");if(!r.string(_))throw new TypeError("Second argument must be a String");if(!r.fn(t))throw new TypeError("Third argument must be a Function");if(r.node(e))return function(e,_,t){return e.addEventListener(_,t),{destroy:function(){e.removeEventListener(_,t)}}}(e,_,t);if(r.nodeList(e))return function(e,_,t){return Array.prototype.forEach.call(e,(function(e){e.addEventListener(_,t)})),{destroy:function(){Array.prototype.forEach.call(e,(function(e){e.removeEventListener(_,t)}))}}}(e,_,t);if(r.string(e))return function(e,_,t){return n(document.body,e,_,t)}(e,_,t);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}},817:function(e){e.exports=function(e){var _;if("SELECT"===e.nodeName)e.focus(),_=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var t=e.hasAttribute("readonly");t||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),t||e.removeAttribute("readonly"),_=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var r=window.getSelection(),n=document.createRange();n.selectNodeContents(e),r.removeAllRanges(),r.addRange(n),_=r.toString()}return _}},279:function(e){function _(){}_.prototype={on:function(e,_,t){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:_,ctx:t}),this},once:function(e,_,t){var r=this;function n(){r.off(e,n),_.apply(t,arguments)}return n._=_,this.on(e,n,t)},emit:function(e){for(var _=[].slice.call(arguments,1),t=((this.e||(this.e={}))[e]||[]).slice(),r=0,n=t.length;r<n;r++)t[r].fn.apply(t[r].ctx,_);return this},off:function(e,_){var t=this.e||(this.e={}),r=t[e],n=[];if(r&&_)for(var a=0,s=r.length;a<s;a++)r[a].fn!==_&&r[a].fn._!==_&&n.push(r[a]);return n.length?t[e]=n:delete t[e],this}},e.exports=_,e.exports.TinyEmitter=_}},_={};function t(r){if(_[r])return _[r].exports;var n=_[r]={exports:{}};return e[r](n,n.exports,t),n.exports}return t.n=function(e){var _=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(_,{a:_}),_},t.d=function(e,_){for(var r in _)t.o(_,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:_[r]})},t.o=function(e,_){return Object.prototype.hasOwnProperty.call(e,_)},t(686)}().default},b9bf:function(e,_,t){"use strict";t.d(_,"a",(function(){return n})),t("14d9"),t("d3b7"),t("25f0"),t("a4d3"),t("e01a"),t("a15b"),t("159b"),t("b0c0");var r=t("b1c7");function n(e){var _=[];return null!=e&&null!=e&&(a(_),_.push("## "+e.summary),a(_),_.push("**接口地址**:`"+e.showUrl+"`"),a(_),_.push("**请求方式**:`"+e.methodType+"`"),a(_),_.push("**请求数据类型**:`"+r.a.toString(e.consumes,"*")+"`"),a(_),_.push("**响应数据类型**:`"+r.a.toString(e.produces,"*")+"`"),a(_),_.push("**接口描述**:"+r.a.toString(e.description,"暂无")),r.a.checkUndefined(e.requestValue)&&(a(_),_.push("**请求示例**:"),a(_),_.push("```javascript"),_.push(e.requestValue),_.push("```")),function(e,_){var t=e.reqParameters;a(_),_.push("**请求参数**:"),a(_),_.push("**请求参数**:"),t.length>0?(a(_),_.push("| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |"),_.push("| -------- | -------- | ----- | -------- | -------- | ------ |"),function e(_,t,n){null!=_&&null!=_&&_.length>0&&_.forEach((function(_){_.level=n,t.push("|"+o(_)+"|"+r.a.toString(_.description,"")+"|"+r.a.toString(_.in,"")+"|"+r.a.toString(_.require,"")+"|"+r.a.toString(_.type,"")+"|"+r.a.toString(_.schemaValue,"")+"|"),e(_.children,t,_.level+1)}))}(t,_,1)):(a(_),_.push("暂无"))}(e,_),function(e,_){r.a.checkUndefined(e.responseCodes)&&e.responseCodes.length>0&&(a(_),_.push("**响应状态**:"),a(_),_.push("| 状态码 | 说明 | schema |"),_.push("| -------- | -------- | ----- | "),e.responseCodes.forEach((function(e){_.push("|"+r.a.toString(e.code,"")+"|"+r.a.toString(e.description,"")+"|"+r.a.toString(e.schema,"")+"|")})))}(e,_),function(e,_){if(e.multipartResponseSchema){var t=e.multipCodeDatas;r.a.arrNotEmpty(t)&&t.forEach((function(e){a(_),_.push("**响应状态码-"+r.a.toString(e.code,"")+"**:"),s(e,_)}))}else s(e.multipData,_)}(e,_)),_.join("\n")}function a(e){e.push("\n")}function s(e,_){(function(e,_){r.a.checkUndefined(e)&&e.length>0&&(a(_),_.push("**响应Header**:"),a(_),_.push("| 参数名称 | 参数说明 | 数据类型 |"),_.push("| -------- | -------- | ----- | "),e.forEach((function(e){_.push("|"+r.a.toString(e.name,"")+"|"+r.a.toString(e.description,"")+"|"+r.a.toString(e.type,"")+"|")})))})(e.responseHeaderParameters,_),a(_),_.push("**响应参数**:"),a(_),r.a.arrNotEmpty(e.data)?(_.push("| 参数名称 | 参数说明 | 类型 | schema |"),_.push("| -------- | -------- | ----- |----- | "),e.data.forEach((function(e){e.level=1,_.push("|"+o(e)+"|"+r.a.toString(e.description,"")+"|"+r.a.toString(e.type,"")+"|"+r.a.toString(e.schemaValue,"")+"|"),function e(_,t,n){null!=_&&null!=_&&_.length>0&&_.forEach((function(_){_.level=n,t.push("|"+o(_)+"|"+r.a.toString(_.description,"")+"|"+r.a.toString(_.type,"")+"|"+r.a.toString(_.schemaValue,"")+"|"),e(_.children,t,_.level+1)}))}(e.children,_,e.level+1)}))):_.push("暂无"),a(_),_.push("**响应示例**:"),e.responseBasicType?(_.push("```text"),_.push(e.responseText),_.push("```")):(_.push("```javascript"),_.push(e.responseValue),_.push("```"))}function o(e){for(var _=[],t=1;t<e.level;t++)_.push("&emsp;&emsp;");return _.join("")+e.name}},bd08:function(module,__webpack_exports__,__webpack_require__){"use strict";var _ide_workspace_knife4j_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("5530"),core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("d3b7"),core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__),core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("3ca3"),core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__),core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("ddb0"),core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__),core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("4de4"),core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4__),core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("caad"),core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_5__),core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("2532"),core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_6__),core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("99af"),core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_7__),core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("b0c0"),core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__),core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("d81d"),core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_9___default=__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_9__),core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("b64b"),core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_10__),core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("4d63"),core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_11__),core_js_modules_es_regexp_dot_all_js__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("c607"),core_js_modules_es_regexp_dot_all_js__WEBPACK_IMPORTED_MODULE_12___default=__webpack_require__.n(core_js_modules_es_regexp_dot_all_js__WEBPACK_IMPORTED_MODULE_12__),core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("ac1f"),core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13___default=__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13__),core_js_modules_es_regexp_sticky_js__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__("2c3e"),core_js_modules_es_regexp_sticky_js__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(core_js_modules_es_regexp_sticky_js__WEBPACK_IMPORTED_MODULE_14__),core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__("25f0"),core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_15___default=__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_15__),core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__("159b"),core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_16___default=__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_16__),core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__("14d9"),core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_17___default=__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_17__),core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__("5319"),core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_18___default=__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_18__),core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__("2ca0"),core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_19___default=__webpack_require__.n(core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_19__),core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__("4e82"),core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_20___default=__webpack_require__.n(core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_20__),core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__("00b4"),core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_21___default=__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_21__),core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__("e9c4"),core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_22___default=__webpack_require__.n(core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_22__),core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_23__=__webpack_require__("a4d3"),core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_23___default=__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_23__),core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_24__=__webpack_require__("e01a"),core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_24___default=__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_24__),core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_25__=__webpack_require__("a15b"),core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_25___default=__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_25__),_core_utils__WEBPACK_IMPORTED_MODULE_26__=__webpack_require__("b1c7"),_store_constants__WEBPACK_IMPORTED_MODULE_27__=__webpack_require__("5609"),_components_officeDocument_markdownSingleTransform__WEBPACK_IMPORTED_MODULE_28__=__webpack_require__("b9bf"),_components_officeDocument_markdownSingleTransformUS__WEBPACK_IMPORTED_MODULE_29__=__webpack_require__("576f"),clipboard__WEBPACK_IMPORTED_MODULE_30__=__webpack_require__("b311"),clipboard__WEBPACK_IMPORTED_MODULE_30___default=__webpack_require__.n(clipboard__WEBPACK_IMPORTED_MODULE_30__),lodash_uniqueId__WEBPACK_IMPORTED_MODULE_31__=__webpack_require__("98dc"),lodash_uniqueId__WEBPACK_IMPORTED_MODULE_31___default=__webpack_require__.n(lodash_uniqueId__WEBPACK_IMPORTED_MODULE_31__),lodash_isObject__WEBPACK_IMPORTED_MODULE_32__=__webpack_require__("1a8c"),lodash_isObject__WEBPACK_IMPORTED_MODULE_32___default=__webpack_require__.n(lodash_isObject__WEBPACK_IMPORTED_MODULE_32__),lodash_has__WEBPACK_IMPORTED_MODULE_33__=__webpack_require__("3852"),lodash_has__WEBPACK_IMPORTED_MODULE_33___default=__webpack_require__.n(lodash_has__WEBPACK_IMPORTED_MODULE_33__),lodash_keys__WEBPACK_IMPORTED_MODULE_34__=__webpack_require__("ec69"),lodash_keys__WEBPACK_IMPORTED_MODULE_34___default=__webpack_require__.n(lodash_keys__WEBPACK_IMPORTED_MODULE_34__),lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_35__=__webpack_require__("0644"),lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_35___default=__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_35__);__webpack_exports__.a={name:"Document",components:{editor:__webpack_require__("7c9e"),DataType:function(){return __webpack_require__.e("chunk-2d0bd799").then(__webpack_require__.bind(null,"2bc6"))},EditorShow:function(){return Promise.all([__webpack_require__.e("chunk-3b888a65"),__webpack_require__.e("chunk-214218f0"),__webpack_require__.e("chunk-2d0af44e")]).then(__webpack_require__.bind(null,"0e36"))}},props:{api:{type:Object,required:!0},swaggerInstance:{type:Object,required:!0}},data:function(){return{content:"<span>Hello</span>",contentType:"*/*",columns:[],responseHeaderColumns:[],responseStatuscolumns:[],responseParametersColumns:[],expanRows:!0,multipCode:!1,multipCodeDatas:[],multipData:{},page:!1,reqParameters:[]}},created:function(){var e=this,_=_store_constants__WEBPACK_IMPORTED_MODULE_27__.a.globalTreeTableModelParams+this.swaggerInstance.id,t=this.swaggerInstance.swaggerTreeTableModels;this.$Knife4jModels.setValue(_,t),this.initI18n(),this.initRequestParams(),this.initResponseCodeParams(),setTimeout((function(){e.copyApiAddress(),e.copyApiMarkdown(),e.copyApiUrl()}),1500)},computed:{language:function(){return this.$store.state.globals.language},swagger:function(){return this.$store.state.globals.swagger},responseCodeDisplayStatus:function(){return this.$store.state.globals.enableResponseCode}},watch:{language:function(e,_){this.initI18n()}},methods:{getCurrentI18nInstance:function(){return this.$i18n.messages[this.language]},initI18n:function(){var e=this.getCurrentI18nInstance();this.columns=e.table.documentRequestColumns,this.responseStatuscolumns=e.table.documentResponseStatusColumns,this.responseHeaderColumns=e.table.documentResponseHeaderColumns,this.responseParametersColumns=e.table.documentResponseColumns},copyApiUrl:function(){var e=this,_="btnCopyMethod"+this.api.id,t=this.api.showUrl,r=new clipboard__WEBPACK_IMPORTED_MODULE_30___default.a("#"+_,{text:function(){return t}});r.on("success",(function(){var _=e.getCurrentI18nInstance().message.copy.method.success;e.$message.info(_)})),r.on("error",(function(_){var t=e.getCurrentI18nInstance().message.copy.method.fail;e.$message.info(t)}))},copyApiAddress:function(){var e=this,_="btnCopyAddress"+this.api.id,t=new clipboard__WEBPACK_IMPORTED_MODULE_30___default.a("#"+_,{text:function(){return window.location.href}});t.on("success",(function(_){var t=e.getCurrentI18nInstance().message.copy.url.success;e.$message.info(t)})),t.on("error",(function(_){var t=e.getCurrentI18nInstance().message.copy.url.fail;e.$message.info(t)}))},copyApiMarkdown:function(){var e=this,_="btnCopyMarkdown"+this.api.id,t=Object(_ide_workspace_knife4j_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_0__.a)(Object(_ide_workspace_knife4j_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_0__.a)({},e.api),{},{reqParameters:e.reqParameters,multipCodeDatas:e.multipCodeDatas,multipData:e.multipData}),r=new clipboard__WEBPACK_IMPORTED_MODULE_30___default.a("#"+_,{text:function(){var _=e.getCurrentI18nInstance();return"zh"===_.lang?Object(_components_officeDocument_markdownSingleTransform__WEBPACK_IMPORTED_MODULE_28__.a)(t):"us"===_.lang?Object(_components_officeDocument_markdownSingleTransformUS__WEBPACK_IMPORTED_MODULE_29__.a)(t):void 0}});r.on("success",(function(_){var t=e.getCurrentI18nInstance().message.copy.document.success;e.$message.info(t)})),r.on("error",(function(_){var t=e.getCurrentI18nInstance().message.copy.document.fail;e.$message.info(t)}))},filterChildrens:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],_=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],t=arguments.length>2?arguments[2]:void 0;if(0===e.length)return _;var r=this,n=t?_.filter((function(_){return!e.includes("".concat(t,".").concat(_.name))})):_.filter((function(_){return!e.includes(_.name)}));return n.map((function(_){return _.id=lodash_uniqueId__WEBPACK_IMPORTED_MODULE_31___default()("param"),_.children&&(_.children=r.filterChildrens(e,_.children,_.name)),_}))},initRequestParams:function initRequestParams(){var _this=this,key=_store_constants__WEBPACK_IMPORTED_MODULE_27__.a.globalTreeTableModelParams+this.swaggerInstance.id,data=[],that=this,apiInfo=this.api;_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.strNotBlank(apiInfo.contentType)&&(this.contentType=apiInfo.contentType),"application/x-www-form-urlencoded;charset=UTF-8"==apiInfo.contentType&&(this.contentType="application/x-www-form-urlencoded");var tmpKeys=Object.keys(apiInfo.ignoreParameters||{}),ignoreParameterAllKeys=[],reg=new RegExp("\\[0\\]","gm");if(null!=tmpKeys&&tmpKeys.length>0&&tmpKeys.forEach((function(e){ignoreParameterAllKeys.push(e),e.indexOf("[0]")>-1&&ignoreParameterAllKeys.push(e.replace(reg,""))})),null!=apiInfo.parameters&&apiInfo.parameters.length>0){var dx=apiInfo.parameters.filter((function(e){return e.name.indexOf("[0]")>-1?!(ignoreParameterAllKeys.length>0)||ignoreParameterAllKeys.filter((function(_){return!e.name.startsWith(_)})).length>0:!ignoreParameterAllKeys.includes(e.name)}));data=data.concat(dx)}null!=apiInfo.refTreetableparameters&&apiInfo.refTreetableparameters.length>0&&apiInfo.refTreetableparameters.forEach((function(e){data=data.concat(e.params)})),null!=data&&data.sort((function(e,_){return _.require-e.require}));var reqParameters=[];if(null!=data&&data.length>0&&data.forEach((function(param){if("-1"==param.pid){if(param.children=null,param.schema){var schemaName=param.schemaValue;if(_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.checkUndefined(schemaName)&&that.$Knife4jModels.exists(key,schemaName)){var model=that.$Knife4jModels.getByModelName(key,schemaName);if(model=that.swagger.analysisDefinitionRefTableModel(that.swaggerInstance.id,model),model&&model.params){var childrens=model.params.filter((function(_ref){var name=_ref.name;return!(ignoreParameterAllKeys.includes(name)||ignoreParameterAllKeys.includes(name+"[0]")||ignoreParameterAllKeys.includes("".concat(param.name,".").concat(name))||ignoreParameterAllKeys.some((function(key){return new RegExp("^(".concat(key,"$|").concat(key,"[.[])")).test(name)||eval("/"+key+"/g").test(name)})))})).map((function(e){var _=that.copyNewParameter(e);if(_.pid=param.id,_.children){var t=JSON.parse(JSON.stringify(_.children)),r=ignoreParameterAllKeys.map((function(e){return e.startsWith("".concat(param.name,".").concat(_.name,"."))?e.replace("".concat(param.name,".").concat(_.name,"."),""):e.startsWith("".concat(_.name,"."))?e.replace("".concat(_.name,"."),""):null})).filter(Boolean);_.children=that.filterChildrens(r,t)}return _}));param.children=childrens.length>0?childrens:null}}}reqParameters.push(param)}})),null!=apiInfo.includeParameters){var tmpIncludeKeys=Object.keys(apiInfo.includeParameters||{}),bodyParam=reqParameters.filter((function(e){return"body"==e.in})).length;if(tmpIncludeKeys.length>0&&bodyParam>0){var includeParameters=[],rootKeys=[];this.deepRootKeys(tmpIncludeKeys,rootKeys),reqParameters.forEach((function(e){if(rootKeys.includes(e.name)){var _=lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_35___default()(e);_.children=null,null!=e.children&&e.children.length>0&&(_.children=new Array,_this.deepIncludeParam(_.name,_,e.children,tmpIncludeKeys,rootKeys)),includeParameters.push(_)}else tmpIncludeKeys.includes(e.name)&&((_=lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_35___default()(e)).children=null,null!=e.children&&e.children.length>0&&(_.children=new Array,_this.deepIncludeParam(_.name,_,e.children,tmpIncludeKeys,rootKeys)),includeParameters.push(_))})),that.reqParameters=includeParameters}else that.reqParameters=reqParameters}else that.reqParameters=reqParameters},deepRootKeys:function(e,_){var t=[];e.forEach((function(e){var r=e.substring(0,e.lastIndexOf("."));r.indexOf(".")>-1&&t.push(r),_.includes(r)||_.push(r)})),t.length>0&&this.deepRootKeys(t,_)},deepIncludeParam:function(e,_,t,r,n){var a=this;null!=t&&t.length>0&&t.forEach((function(t){var s=e+"."+t.name;if(n.includes(s)){var o=lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_35___default()(t);o.children=null,_.children.push(o),_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.arrNotEmpty(t.children)&&(o.children=new Array,a.deepIncludeParam(s,o,t.children,r,n))}else r.includes(s)&&_.children.push(t)}))},copyNewParameter:function(e){var _=Object.assign({},e);return _.id=lodash_uniqueId__WEBPACK_IMPORTED_MODULE_31___default()("param"),function e(_){return _?_.map((function(_){_.id=lodash_uniqueId__WEBPACK_IMPORTED_MODULE_31___default()("param"),e(_.children)})):null}(_.children),_},deepTreeTableSchemaModel:function(e,_,t){var r=this;if(_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.checkUndefined(e.schemaValue)){var n=_[e.schemaValue];_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.checkUndefined(n)&&(t.parentTypes.push(e.schemaValue),_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.arrNotEmpty(n.params)&&n.params.forEach((function(n){var a={childrenTypes:n.childrenTypes,def:n.def,description:n.description,enum:n.enum,example:n.example,id:n.id,ignoreFilterName:n.ignoreFilterName,in:n.in,level:n.level,name:n.name,parentTypes:n.parentTypes,pid:n.pid,readOnly:n.readOnly,require:n.require,schema:n.schema,schemaValue:n.schemaValue,show:n.show,txtValue:n.txtValue,type:n.type,validateInstance:n.validateInstance,validateStatus:n.validateStatus,value:n.value};a.pid=e.id,e.children.push(a),a.schema&&-1==t.parentTypes.indexOf(a.schemaValue)&&(a.children=[],r.deepTreeTableSchemaModel(a,_,t),0==a.children.length&&(a.children=null))})))}},findModelChildren:function(e,_){var t=this;null!=_&&null!=_&&_.length>0&&_.forEach((function(r){r.pid==e.id&&(r.children=[],t.findModelChildren(r,_),0==r.children.length&&(r.children=null),e.children.push(r))}))},initResponseCodeParams:function(){var e=this,_=_store_constants__WEBPACK_IMPORTED_MODULE_27__.a.globalTreeTableModelParams+this.swaggerInstance.id;e.multipCode=this.api.multipartResponseSchema,e.multipCodeDatas=[],e.multipData={};var t=this.api.responseCodes;if(null!=t&&null!=t){for(var r=function(){var r=t[n];if(null!=r.schema&&null!=r.schema){a=[],null!=r.responseParameters&&r.responseParameters.length>0&&(a=a.concat(r.responseParameters)),null!=r.responseTreetableRefParameters&&r.responseTreetableRefParameters.length>0&&r.responseTreetableRefParameters.forEach((function(e){a=a.concat(e.params)}));var s=[];null!=a&&a.length>0&&a.forEach((function(t){if("-1"==t.pid){if(t.children=[],t.schema){var r=t.schemaValue;if(_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.checkUndefined(r))if(e.$Knife4jModels.exists(_,r)){var n=e.$Knife4jModels.getByModelName(_,r);(n=e.swagger.analysisDefinitionRefTableModel(e.swaggerInstance.id,n))&&n.params&&(t.children=n.params.map((function(_){var r=e.copyNewParameter(_);return r.pid=t.id,r})))}else{var o=a.filter((function(e){return e.pid==t.id}));_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.checkUndefined(o)&&(t.children=o.map((function(_){var r=e.copyNewParameter(_);return r.pid=t.id,r})))}}0==t.children.length&&(t.children=null),s.push(t)}})),i=Object(_ide_workspace_knife4j_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_0__.a)(Object(_ide_workspace_knife4j_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_0__.a)({},r),{},{data:s}),e.multipCode||(e.multipData=i),e.multipCodeDatas.push(i)}else 0==n&&(e.multipData=r)},n=0;n<t.length;n++){var a;r()}var s=Object.keys(e.multipData);if(_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.arrNotEmpty(t)&&!_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.arrNotEmpty(s)){var o=t[0];if(_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.strNotBlank(o.schemaTitle)){var i=Object(_ide_workspace_knife4j_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_0__.a)(Object(_ide_workspace_knife4j_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_0__.a)({},o),{},{data:[]});e.multipData=i}}}},showResponseEditFieldDescription:function(e){if(this.api.multipartResponseSchema){var _=this.multipCodeDatas[0],t="knife4jDocumentShowEditor"+this.api.id+_.code;this.showEditorFieldAnyWay(t)}else t="knife4jDocumentShowEditor"+this.api.id,this.showEditorFieldAnyWay(t)},multipartTabCodeChanges:function(e){var _=this;setTimeout((function(){var t="knife4jDocumentShowEditor"+_.api.id+e;_.showEditorFieldAnyWay(t)}),1e3)},showEditorFieldAnyWay:function(e){var _=this.swaggerInstance,t=this.api.getHttpSuccessCodeObject(),r=document.getElementById(e),n=[],a=r.getElementsByClassName("ace_text-layer"),s=r.querySelector(".ace_print-margin").style.left;if(a.length>0)for(var o=a[0].getElementsByClassName("ace_line"),i=0;i<o.length;i++){var c=o[i],u=c.getElementsByClassName("ace_variable"),l=null;if(_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.arrNotEmpty(u)){l=_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.toString(u[0].innerHTML,"").replace(/^"(.*)"$/g,"$1");var p=c.getElementsByClassName("knife4j-debug-editor-field-description");if(!_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.arrNotEmpty(p)&&null!=t){var d=document.createElement("span");d.className="knife4j-debug-editor-field-description",d.innerHTML=t.responseDescriptionFind(n,l,_),d.style.left=s,c.appendChild(d)}}var m=c.getElementsByClassName("ace_paren");if(_core_utils__WEBPACK_IMPORTED_MODULE_26__.a.arrNotEmpty(m)){for(var f=[],h=0;h<m.length;h++)f.push(m[h].innerHTML);switch(f.join("")){case"[":case"{":n.push(l||0);break;case"}":case"]":n.pop()}}}}}}},eeba:function(e,_,t){"use strict";t.r(_),t("a4d3"),t("e01a");var r=t("bd08").a,n=(t("f377"),t("2877")),a=Object(n.a)(r,(function(){var e=this,_=e._self._c;return _("div",{staticClass:"document"},[_("a-row",[_("a-row",{staticClass:"knife4j-api-title"},[_("a-col",{attrs:{span:18}},[e.api.deprecated?_("span",{staticClass:"knife4j-menu-api-deprecated"},[e._v(" "+e._s(e.api.summary)+" ")]):_("span",[e._v(" "+e._s(e.api.summary)+" ")])]),_("a-col",{staticClass:"knife4j-api-copy-address",attrs:{span:2,id:"btnCopyMethod"+e.api.id},domProps:{innerHTML:e._s(e.$t("doc.copyMethod"))}},[e._v(" 复制接口")]),_("a-col",{staticClass:"knife4j-api-copy-address",attrs:{span:2,id:"btnCopyMarkdown"+e.api.id},domProps:{innerHTML:e._s(e.$t("doc.copy"))}},[e._v("复制文档 ")]),_("a-col",{staticClass:"knife4j-api-copy-address",attrs:{span:2,id:"btnCopyAddress"+e.api.id},domProps:{innerHTML:e._s(e.$t("doc.copyHash"))}},[e._v(" 复制地址")])],1),_("a-row",{class:"knife4j-api-"+e.api.methodType.toLowerCase()},[_("div",{staticClass:"knife4j-api-summary"},[_("span",{staticClass:"knife4j-api-summary-method"},[e.api.securityFlag?_("a-icon",{staticStyle:{"font-size":"16px"},attrs:{type:"unlock"}}):e._e(),e._v(" "+e._s(e.api.methodType)+" ")],1),_("span",{staticClass:"knife4j-api-summary-path"},[e._v(e._s(e.api.showUrl))])])]),_("a-row",{staticClass:"knife4j-api-row"},[_("a-col",{attrs:{span:12}},[_("a-row",[_("a-col",{staticClass:"api-basic-title",attrs:{span:6},domProps:{innerHTML:e._s(e.$t("doc.produces"))}},[e._v("请求数据类型")]),e._v(" "+e._s(e.contentType)+" ")],1)],1),_("a-col",{attrs:{span:12}},[_("a-row",[_("a-col",{staticClass:"api-basic-title",attrs:{span:6},domProps:{innerHTML:e._s(e.$t("doc.consumes"))}},[e._v("响应数据类型")]),e._v(" "+e._s(e.api.produces)+" ")],1)],1)],1)],1),e.api.author?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.author"))}},[e._v(" 开发者 ")]),e.api.author?_("div",{staticClass:"api-body-desc",domProps:{innerHTML:e._s(e.api.author)}}):e._e()]):e._e(),e.api.description?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.des"))}},[e._v(" 接口描述 ")]),e.api.description?_("div",{staticClass:"api-body-desc",domProps:{innerHTML:e._s(e.api.description)}}):e._e()]):e._e(),e.api.requestValue?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.requestExample"))}},[e._v(" 请求示例 ")]),_("editor-show",{attrs:{value:e.api.requestValue,xmlMode:e.api.xmlRequest}})],1):e._e(),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.params"))}},[e._v(" 请求参数 ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.columns,dataSource:e.reqParameters,rowKey:"id",size:"small",pagination:e.page},scopedSlots:e._u([{key:"descriptionValueTemplate",fn:function(t,r){return[_("span",{domProps:{innerHTML:e._s(t)}}),r.example?_("span",[e._v(","),_("span",{domProps:{innerHTML:e._s(e.$t("doc.example"))}}),e._v("("+e._s(r.example)+")")]):e._e()]}},{key:"requireTemplate",fn:function(t){return[t?_("span",{staticStyle:{color:"red"}},[e._v(e._s(t.toLocaleString()))]):_("span",[e._v(e._s(t.toLocaleString()))])]}},{key:"typeTemplate",fn:function(t){return[_("span",{class:"knife4j-request-"+t},[e._v(e._s(t))])]}},{key:"datatypeTemplate",fn:function(e,t){return[_("data-type",{attrs:{text:e,record:t}})]}}])}),e.responseCodeDisplayStatus?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.response"))}},[e._v(" 响应状态 ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseStatuscolumns,dataSource:e.api.responseCodes,rowKey:"code",size:"small",pagination:e.page},scopedSlots:e._u([{key:"descriptionTemplate",fn:function(t){return[_("div",{domProps:{innerHTML:e._s(t)}})]}},{key:"schemaTemplate",fn:function(t,r){return[null!=t?_("span",{domProps:{innerHTML:e._s(t)}}):null!=r.schemaTitle?_("span",{domProps:{innerHTML:e._s(r.schemaTitle)}}):e._e()]}}],null,!1,3947286773)})],1):e._e(),e.api.multipartResponseSchema?_("div",[_("a-tabs",{on:{change:e.multipartTabCodeChanges}},e._l(e.multipCodeDatas,(function(t){return _("a-tab-pane",{key:t.code,attrs:{tab:t.code}},[t.responseHeaderParameters?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseHeaderParams"))}},[e._v(" 响应Header ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseHeaderColumns,dataSource:t.responseHeaderParameters,rowKey:"id",size:"small",pagination:e.page}})],1):e._e(),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseParams"))}},[e._v(" 响应参数 ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseParametersColumns,dataSource:t.data,rowKey:"id",size:"small",pagination:e.page},scopedSlots:e._u([{key:"descriptionTemplate",fn:function(t){return[_("span",{domProps:{innerHTML:e._s(t)}})]}}],null,!0)}),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseExample"))}},[e._v(" 响应示例 ")]),_("a-row",{attrs:{id:"knife4jDocumentShowEditor"+e.api.id+t.code}},[_("editor-show",{attrs:{value:t.responseBasicType?t.responseText:t.responseValue},on:{showDescription:e.showResponseEditFieldDescription}})],1)],1)})),1)],1):_("div",[e.api.responseHeaderParameters?_("div",[_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseHeaderParams"))}},[e._v(" 响应Header ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseHeaderColumns,dataSource:e.api.responseHeaderParameters,rowKey:"id",size:"small",pagination:e.page}})],1):e._e(),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseParams"))}},[e._v(" 响应参数 ")]),_("a-table",{attrs:{defaultExpandAllRows:e.expanRows,columns:e.responseParametersColumns,dataSource:e.multipData.data,rowKey:"id",size:"small",pagination:e.page},scopedSlots:e._u([{key:"descriptionTemplate",fn:function(t){return[_("span",{domProps:{innerHTML:e._s(t)}})]}}])}),_("div",{staticClass:"api-title",domProps:{innerHTML:e._s(e.$t("doc.responseExample"))}},[e._v(" 响应示例 ")]),_("a-row",{attrs:{id:"knife4jDocumentShowEditor"+e.api.id}},[_("editor-show",{attrs:{value:e.multipData.responseBasicType?e.multipData.responseText:e.multipData.responseValue},on:{showDescription:e.showResponseEditFieldDescription}})],1)],1)],1)}),[],!1,null,"3e1ec994",null);_.default=a.exports},f377:function(e,_,t){"use strict";t("5a4f")}}]);")))
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}
}
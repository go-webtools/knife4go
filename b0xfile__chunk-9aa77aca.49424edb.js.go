package knife4go
import (
	"os"
)

func init() {

	f, err := FS.OpenFile(CTX, "/chunk-9aa77aca.49424edb.js", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = f.Write([] byte(base64Decoding("(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-9aa77aca"],{1148:function(e,t,a){"use strict";var r=a("5926"),n=a("577e"),i=a("1d80"),o=RangeError;e.exports=function(e){var t=n(i(this)),a="",s=r(e);if(s<0||s==1/0)throw o("Wrong number of repetitions");for(;s>0;(s>>>=1)&&(t+=t))1&s&&(a+=t);return a}},7444:function(e,t,a){"use strict";a.r(t),a("a4d3"),a("e01a");var r=a("5530"),n=(a("d3b7"),a("3ca3"),a("ddb0"),a("25f0"),a("159b"),a("b0c0"),a("4de4"),a("14d9"),a("4d63"),a("c607"),a("ac1f"),a("2c3e"),a("00b4"),a("caad"),a("2532"),a("a15b"),a("5319"),a("b64b"),a("99af"),a("b680"),a("e9c4"),a("498a"),a("8a79"),a("2b3d"),a("9861"),a("8237"),a("4328"),a("b1c7")),i={resolveBlobResponse:function(e,t){if(n.a.checkUndefined(e)){var a=e.request,r=e.headers;if(n.a.checkUndefined(a)){var i=n.a.propValue("content-disposition",r,"");if("blob"==a.responseType||n.a.strNotBlank(i)){var o=e.data.type;if("application/json"==o||"application/xml"==o||"text/html"==o||"text/plain"==o){var s=new FileReader;s.onload=function(r){var n={responseText:r.target.result,response:r.target.result,responseTextType:o,status:a.status,headers:e.headers,statusText:a.statusText,readyState:a.readyState,timeout:a.timeout,withCredentials:a.withCredentials};t(n)},s.readAsText(e.data)}}else{var l={responseText:e.data,response:e.data,responseTextType:"",status:a.status,headers:e.headers,statusText:a.statusText,readyState:a.readyState,timeout:a.timeout,withCredentials:a.withCredentials};t(l)}}else{var u={responseText:e.data,response:e.data,responseTextType:"",status:a.status,headers:e.headers,statusText:a.statusText,readyState:a.readyState,timeout:a.timeout,withCredentials:a.withCredentials};t(u)}}}},o=a("1469"),s=a("5609"),l=function(e,t,a,r,n){this.groupId=n,this.cacheKey=e,this.allGroups=a,this.commands=r,this.targetValue=t||{},this.init()};l.prototype={init:function(){var e=this;n.a.arrNotEmpty(this.commands)&&this.commands.forEach((function(t){e.addValue(t.name,t.value,t.type,t.all)}))},addValue:function(e,t,a,r){var n=this;r?this.allGroups.forEach((function(r){n.addCurrentGroup(e,t,a,r)})):this.addCurrentGroup(e,t,a,this.groupId)},addCurrentGroup:function(e,t,a,r){var i=e+a,o=this.targetValue[r];n.a.arrNotEmpty(o)?o.filter((function(e){return e.pkid==i&&e.in==a})).length>0?o.forEach((function(e){e.pkid==i&&e.in==a&&(e.value=t)})):o.push({name:e,value:t,in:a,pkid:i}):(o=[]).push({name:e,value:t,in:a,pkid:i});this.targetValue[r]=o},save:function(){o.a.setItem(this.cacheKey,this.targetValue)}};var u=l,d=function(e){var t=this;this.groupid=e.groupid||"afterScriptGroup",this.commands=[],this.allgroupids=e.allgroupids||[],this.response=e.response||{data:{},headers:{}},this.global={setHeader:function(e,a){t.global.setCommon(e,a,"header",!1)},setAllHeader:function(e,a){t.global.setCommon(e,a,"header",!0)},setParameter:function(e,a){t.global.setCommon(e,a,"query",!1)},setAllParameter:function(e,a){t.global.setCommon(e,a,"query",!0)},setCommon:function(e,a,r,n){t.global.cacheCommand(e,a,r,n)},cacheCommand:function(e,a,r,n){t.commands.push({name:e,value:a,type:r,all:n})},action:function(){if(null!=t.commands&&t.commands.length>0){var e=t.commands,a=t.groupid,r=t.allgroupids;o.a.getItem(s.a.globalParameter).then((function(t){new u(s.a.globalParameter,t,r,e,a).save()}))}},executeAsyncCommon:function(e,a,r,i){var l=t.groupid,u=e+r;if(i){var d=t.allgroupids;o.a.getItem(s.a.globalParameter).then((function(t){if(n.a.checkUndefined(t)){var i={};d.forEach((function(o){var s=t[o];n.a.checkUndefined(s)||n.a.arrEmpty(s)?((s=[]).push({name:e,value:a,in:r,pkid:u}),i[o]=s):(0==s.filter((function(e){return e.pkid==u&&e.in==r})).length?s.push({name:e,value:a,in:r,pkid:u}):s.forEach((function(e){e.in==r&&e.pkid==u&&(e.value=a)})),i[o]=s)})),o.a.setItem(s.a.globalParameter,i)}else{var l=[];l.push({name:e,value:a,in:r,pkid:u});var c={};d.forEach((function(e){c[e]=l})),o.a.setItem(s.a.globalParameter,c)}}))}else o.a.getItem(s.a.globalParameter).then((function(t){var i=[],d={};if(n.a.checkUndefined(t)){for(var c in t)c==l?i=t[c]:d[c]=t[c];0==i.filter((function(e){return e.pkid==u&&e.in==r})).length?i.push({name:e,value:a,in:r,pkid:u}):i.forEach((function(e){e.in==r&&e.pkid==u&&(e.value=a)})),d[l]=i,o.a.setItem(s.a.globalParameter,d)}else i.push({name:e,value:a,in:r,pkid:u});d[l]=i,o.a.setItem(s.a.globalParameter,d)}))}}},c=a("bc3a"),h=a.n(c),m=a("0644"),p=a.n(m),f=a("53ca");
/**
 * vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
 * https://github.com/aabluedragon/vkbeautify
 * Copyright (c) 2012 Vadim Kiryukhin
 * vkiryukhin @ gmail.com
 * http://www.eslinstructor.net/vkbeautify/
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 *   Pretty print
 *
 *        vkbeautify.xml(text [,indent_pattern]);
 *        vkbeautify.json(text [,indent_pattern]);
 *        vkbeautify.css(text [,indent_pattern]);
 *        vkbeautify.sql(text [,indent_pattern]);
 *
 *        @text - String; text to beatufy;
 *        @indent_pattern - Integer | String;
 *                Integer:  number of white spaces;
 *                String:   character string to visualize indentation ( can also be a set of white spaces )
 *   Minify
 *
 *        vkbeautify.xmlmin(text [,preserve_comments]);
 *        vkbeautify.jsonmin(text);
 *        vkbeautify.cssmin(text [,preserve_comments]);
 *        vkbeautify.sqlmin(text);
 *
 *        @text - String; text to minify;
 *        @preserve_comments - Bool; [optional];
 *                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
 *
 *   Examples:
 *        vkbeautify.xml(text); // pretty print XML
 *        vkbeautify.json(text, 4 ); // pretty print JSON
 *        vkbeautify.css(text, '. . . .'); // pretty print CSS
 *        vkbeautify.sql(text, '----'); // pretty print SQL
 *
 *        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
 *        vkbeautify.jsonmin(text);// minify JSON
 *        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
 *        vkbeautify.sqlmin(text);// minify SQL
 *
 */
function g(e){var t="    ";if(isNaN(parseInt(e)))t=e;else switch(e){case 1:t=" ";break;case 2:t="  ";break;case 3:t="   ";break;case 4:t="    ";break;case 5:t="     ";break;case 6:t="      ";break;case 7:t="       ";break;case 8:t="        ";break;case 9:t="         ";break;case 10:t="          ";break;case 11:t="           ";break;case 12:t="            "}for(var a=["\n"],r=0;r<100;r++)a.push(a[r]+t);return a}function w(){this.step="    ",this.shift=g(this.step)}function b(e,t){return t-(e.replace(/\(/g,"").length-e.replace(/\)/g,"").length)}function v(e,t){return e.replace(/\s{1,}/g," ").replace(/ AND /gi,"~::~"+t+t+"AND ").replace(/ BETWEEN /gi,"~::~"+t+"BETWEEN ").replace(/ CASE /gi,"~::~"+t+"CASE ").replace(/ ELSE /gi,"~::~"+t+"ELSE ").replace(/ END /gi,"~::~"+t+"END ").replace(/ FROM /gi,"~::~FROM ").replace(/ GROUP\s{1,}BY/gi,"~::~GROUP BY ").replace(/ HAVING /gi,"~::~HAVING ").replace(/ IN /gi," IN ").replace(/ JOIN /gi,"~::~JOIN ").replace(/ CROSS~::~{1,}JOIN /gi,"~::~CROSS JOIN ").replace(/ INNER~::~{1,}JOIN /gi,"~::~INNER JOIN ").replace(/ LEFT~::~{1,}JOIN /gi,"~::~LEFT JOIN ").replace(/ RIGHT~::~{1,}JOIN /gi,"~::~RIGHT JOIN ").replace(/ ON /gi,"~::~"+t+"ON ").replace(/ OR /gi,"~::~"+t+t+"OR ").replace(/ ORDER\s{1,}BY/gi,"~::~ORDER BY ").replace(/ OVER /gi,"~::~"+t+"OVER ").replace(/\(\s{0,}SELECT /gi,"~::~(SELECT ").replace(/\)\s{0,}SELECT /gi,")~::~SELECT ").replace(/ THEN /gi," THEN~::~"+t).replace(/ UNION /gi,"~::~UNION~::~").replace(/ USING /gi,"~::~USING ").replace(/ WHEN /gi,"~::~"+t+"WHEN ").replace(/ WHERE /gi,"~::~WHERE ").replace(/ WITH /gi,"~::~WITH ").replace(/ ALL /gi," ALL ").replace(/ AS /gi," AS ").replace(/ ASC /gi," ASC ").replace(/ DESC /gi," DESC ").replace(/ DISTINCT /gi," DISTINCT ").replace(/ EXISTS /gi," EXISTS ").replace(/ NOT /gi," NOT ").replace(/ NULL /gi," NULL ").replace(/ LIKE /gi," LIKE ").replace(/\s{0,}SELECT /gi,"SELECT ").replace(/\s{0,}UPDATE /gi,"UPDATE ").replace(/ SET /gi," SET ").replace(/~::~{1,}/g,"~::~").split("~::~")}a("841c"),a("fb6a"),w.prototype.xml=function(e,t){var a=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").replace(/\s*xmlns\=/g,"~::~xmlns=").split("~::~"),r=a.length,n=!1,i=0,o="",s=0,l=t?g(t):this.shift;for(s=0;s<r;s++)a[s].search(/<!/)>-1?(o+=l[i]+a[s],n=!0,(a[s].search(/-->/)>-1||a[s].search(/\]>/)>-1||a[s].search(/!DOCTYPE/)>-1)&&(n=!1)):a[s].search(/-->/)>-1||a[s].search(/\]>/)>-1?(o+=a[s],n=!1):/^<\w/.exec(a[s-1])&&/^<\/\w/.exec(a[s])&&/^<[\w:\-\.\,]+/.exec(a[s-1])==/^<\/[\w:\-\.\,]+/.exec(a[s])[0].replace("/","")?(o+=a[s],n||i--):a[s].search(/<\w/)>-1&&-1==a[s].search(/<\//)&&-1==a[s].search(/\/>/)?o=o+=n?a[s]:l[i++]+a[s]:a[s].search(/<\w/)>-1&&a[s].search(/<\//)>-1?o=o+=n?a[s]:l[i]+a[s]:a[s].search(/<\//)>-1?o=o+=n?a[s]:l[--i]+a[s]:a[s].search(/\/>/)>-1?o=o+=n?a[s]:l[i]+a[s]:a[s].search(/<\?/)>-1||a[s].search(/xmlns\:/)>-1||a[s].search(/xmlns\=/)>-1?o+=l[i]+a[s]:o+=a[s];return"\n"==o[0]?o.slice(1):o},w.prototype.json=function(e,t){return t=t||this.step,"undefined"==typeof JSON?e:"string"==typeof e?JSON.stringify(JSON.parse(e),null,t):"object"===Object(f.a)(e)?JSON.stringify(e,null,t):e},w.prototype.css=function(e,t){var a=e.replace(/\s{1,}/g," ").replace(/\{/g,"{~::~").replace(/\}/g,"~::~}~::~").replace(/\;/g,";~::~").replace(/\/\*/g,"~::~/*").replace(/\*\//g,"*/~::~").replace(/~::~\s{0,}~::~/g,"~::~").split("~::~"),r=a.length,n=0,i="",o=0,s=t?g(t):this.shift;for(o=0;o<r;o++)/\{/.exec(a[o])?i+=s[n++]+a[o]:/\}/.exec(a[o])?i+=s[--n]+a[o]:(/\*\\/.exec(a[o]),i+=s[n]+a[o]);return i.replace(/^\n{1,}/,"")},w.prototype.sql=function(e,t){var a=e.replace(/\s{1,}/g," ").replace(/\'/gi,"~::~'").split("~::~"),r=a.length,n=[],i=0,o=this.step,s=0,l="",u=0,d=t?g(t):this.shift;for(u=0;u<r;u++)n=u%2?n.concat(a[u]):n.concat(v(a[u],o));for(r=n.length,u=0;u<r;u++)s=b(n[u],s),/\s{0,}\s{0,}SELECT\s{0,}/.exec(n[u])&&(n[u]=n[u].replace(/\,/g,",\n"+o+o)),/\s{0,}\s{0,}SET\s{0,}/.exec(n[u])&&(n[u]=n[u].replace(/\,/g,",\n"+o+o)),/\s{0,}\(\s{0,}SELECT\s{0,}/.exec(n[u])?l+=d[++i]+n[u]:/\'/.exec(n[u])?(s<1&&i&&i--,l+=n[u]):(l+=d[i]+n[u],s<1&&i&&i--);return l=l.replace(/^\n{1,}/,"").replace(/\n{1,}/g,"\n")},w.prototype.xmlmin=function(e,t){return(t?e:e.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"").replace(/[ \r\n\t]{1,}xmlns/g," xmlns")).replace(/>\s{0,}</g,"><")},w.prototype.jsonmin=function(e){return"undefined"==typeof JSON?e:JSON.stringify(JSON.parse(e),null,0)},w.prototype.cssmin=function(e,t){return(t?e:e.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"")).replace(/\s{1,}/g," ").replace(/\{\s{1,}/g,"{").replace(/\}\s{1,}/g,"}").replace(/\;\s{1,}/g,";").replace(/\/\*\s{1,}/g,"/*").replace(/\*\/\s{1,}/g,"*/")},w.prototype.sqlmin=function(e){return e.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")")};var F=w,y={name:"Debug",components:{EditorScript:function(){return Promise.all([a.e("chunk-3b888a65"),a.e("chunk-0fd67716"),a.e("chunk-0d102d5a")]).then(a.bind(null,"cf04"))},EditorDebugShow:function(){return Promise.all([a.e("chunk-3b888a65"),a.e("chunk-0fd67716"),a.e("chunk-214218f0"),a.e("chunk-735c675c")]).then(a.bind(null,"b3ee"))},DebugResponse:function(){return a.e("chunk-589faee0").then(a.bind(null,"3c60"))}},props:{api:{type:Object,required:!0},swaggerInstance:{type:Object,required:!0}},data:function(){var e=this;return{oldApi:{},i18n:null,bigFlag:!1,bigBlobFlag:!1,debugUrlStyle:"width: 70%",enableRequestCache:!1,enableDynamicParameter:!1,enableHost:!1,enableHostText:"",authorizeQueryParameters:[],headerColumn:[],formColumn:[],urlFormColumn:[],allowClear:!0,pagination:!1,headerAutoOptions:s.a.debugRequestHeaders,headerOptions:s.a.debugRequestHeaderOptions,headerCount:0,headerCountFlag:!1,headerSelectName:"",selectedRowKeys:[],requestParameterAllow:!0,rowSelection:{selectedRowKeys:[],onChange:function(t,a){e.rowSelection.selectedRowKeys=t}},rowFormSelection:{selectedRowKeys:[],onChange:function(t,a){e.rowFormSelection.selectedRowKeys=t}},rowRawFormSelection:{selectedRowKeys:[],onChange:function(t,a){e.rowRawFormSelection.selectedRowKeys=t}},rowUrlFormSelection:{selectedRowKeys:[],onChange:function(t,a){e.rowUrlFormSelection.selectedRowKeys=t}},headerData:[],headerTableFlag:!0,globalParameters:[],debugUrl:"",debugMethodType:"",debugPathFlag:!1,debugPathParams:[],debugLoading:!1,oAuthApi:!1,debugSend:!1,formData:[],formFlag:!1,formTableFlag:!0,urlFormData:[],urlFormFlag:!1,urlFormTableFlag:!0,rawFormData:[],rawFormFlag:!1,rawFormTableFlag:!0,rawDefaultText:"Auto",rawFlag:!1,rawTypeFlag:!1,formatFlag:!1,rawText:"",rawScript:"",rawScriptMode:"javascript",rawMode:"text",rawRequestType:"application/json",requestContentType:"x-www-form-urlencoded",responseHeaders:[],responseRawText:"",responseCurlText:"",responseStatus:null,responseContent:null,responseFieldDescriptionChecked:!0,routeHeader:null,oas2:!0}},created:function(){this.routeHeader=this.swaggerInstance.header,this.oas2=this.swaggerInstance.oas2(),this.initI18n(),this.initLocalGlobalParameters(),this.initDebugUrl(),this.oldApi=p()(this.api),this.enableReloadCacheParameter?this.debugUrlStyle="width: 65%;":this.debugUrlStyle="width: 70%;"},computed:{language:function(){return this.$store.state.globals.language},enableAfterScript:function(){return this.$store.state.globals.enableAfterScript},enableReloadCacheParameter:function(){return this.$store.state.globals.enableReloadCacheParameter}},watch:{language:function(e,t){this.initI18n()}},methods:{resetCacheParameter:function(){this.headerData=[],this.formData=[],this.urlFormData=[],this.rawFormData=[],this.rawText=n.a.toString(this.oldApi.requestValue,""),this.rawScript="",this.storeApiParams(),this.initLocalGlobalParameters(),this.initDebugUrl()},reloadCacheParameter:function(){var e=this,t=[],a=this.api.instanceId;this.$localStore.getItem(s.a.globalParameter).then((function(r){null!=r&&null!=r[a]&&null!=r[a]&&(t=r[a]),n.a.arrNotEmpty(t)&&(e.reloadUpdateHeader(t),e.rawFlag?e.reloadUpdateRawForm(t):e.formFlag?e.reloadUpdateForm(t):e.urlFormFlag&&e.reloadUpdateUrlForm(t))}))},reloadUpdateCommons:function(e,t,a){var r=[],i=!1,o=!1;n.a.arrNotEmpty(t)&&t.forEach((function(t){var o=t.name+a,s=e.filter((function(e){return e.pkid==o}));if(n.a.arrNotEmpty(s)){var l=s[0],u=n.a.getValue(l,"value","",!0);t.content=u,i=!0}r.push(t)}));var s=e.filter((function(e){return e.in==a}));return n.a.arrNotEmpty(s)&&s.forEach((function(e){var t=r.filter((function(t){return t.name==e.name}));if(!n.a.arrNotEmpty(t)){var a={id:n.a.randomMd5(),name:e.name,content:e.value,require:!0,description:"",enums:null,enumsMode:"default",new:!1};r.push(a),i=!0,o=!0}})),{update:i,data:r,add:o}},reloadUpdateHeader:function(e){var t=this,a=this.reloadUpdateCommons(e,this.headerData,"header");a.update&&(this.headerData=[],setTimeout((function(){t.headerData=a.data,a.add&&(t.initSelectionHeaders(),t.headerResetCalc())}),10))},reloadUpdateUrlForm:function(e){var t=this,a=this.reloadUpdateCommons(e,this.urlFormData,"query");a.update&&(this.urlFormData=[],setTimeout((function(){t.urlFormData=a.data,a.add&&t.initUrlFormSelections()}),10))},reloadUpdateForm:function(e){var t=this,a=this.reloadUpdateCommons(e,this.formData,"query");a.update&&(this.formData=[],setTimeout((function(){t.formData=a.data,a.add&&t.initFormSelections()}),10))},reloadUpdateRawForm:function(e){var t=this,a=this.reloadUpdateCommons(e,this.rawFormData,"query");a.update&&(this.rawFormData=[],setTimeout((function(){t.rawFormData=a.data,a.add&&(t.rawFormFlag=!0,t.rawFormTableFlag=!0,t.initRawFormSelections())}),10))},getCurrentI18nInstance:function(){return this.$i18n.messages[this.language]},initI18n:function(){var e=this.getCurrentI18nInstance();this.i18n=e,this.headerColumn=e.table.debugRequestHeaderColumns,this.formColumn=e.table.debugFormDataRequestColumns,this.urlFormColumn=e.table.debugUrlFormRequestColumns},debugUrlChange:function(e){this.debugUrl=e.target.value},initDebugUrl:function(){if(this.debugUrl=this.api.url,this.debugMethodType=this.api.methodType,new RegExp("{(.*?)}","ig").test(this.debugUrl)){this.debugPathFlag=!0;for(var e=null,t=new RegExp("{(.*?)}","ig");e=t.exec(this.debugUrl);)this.debugPathParams.push(e[1])}},initLocalGlobalParameters:function(){var e=this,t=this.api.instanceId;this.$localStore.getItem(s.a.globalSettingsKey).then((function(a){if(n.a.checkUndefined(a)&&(e.enableRequestCache=a.enableRequestCache,n.a.checkUndefined(a.enableDynamicParameter)&&(e.enableDynamicParameter=a.enableDynamicParameter),n.a.checkUndefined(a.enableHost))){e.enableHost=a.enableHost;var r=a.enableHostText;n.a.checkUndefined(r)?(r.startWith("http")||(r="http://"+r),e.enableHostText=r):e.enableHost=!1}e.$localStore.getItem(s.a.globalParameter).then((function(a){null!=a&&null!=a[t]&&null!=a[t]&&(e.globalParameters=a[t]);var r=s.a.debugCacheApiId+e.api.id;e.$localStore.getItem(r).then((function(t){e.initHeaderParameter(t);var a=s.a.globalSecurityParamPrefix+e.api.instanceId;e.$localStore.getItem(a).then((function(a){n.a.arrNotEmpty(a)&&a.forEach((function(t){if("query"==t.in){var a={id:n.a.randomMd5(),name:t.name,content:t.value,value:t.value,require:!0,description:"",enums:null,enumsMode:"default",new:!1};e.api.securityFlag&&e.api.securityKeys.includes(t.key)&&e.authorizeQueryParameters.push(a)}})),e.initBodyParameter(t)}))}))}))}))},initHeaderParameter:function(e){var t=this,a=this.syncFromOAuth2();if(n.a.checkUndefined(a)){this.oAuthApi=!0;var r={id:n.a.randomMd5(),name:a.name,content:a.accessToken,require:!0,description:"",enums:null,enumsMode:"default",new:!1};this.addDebugHeader(r)}this.globalParameters.forEach((function(e){if("header"==e.in){var a={id:n.a.randomMd5(),name:e.name,content:e.value,require:!0,description:"",enums:null,enumsMode:"default",new:!1};t.addDebugHeader(a)}}));var i=s.a.globalSecurityParamPrefix+this.api.instanceId;this.$localStore.getItem(i).then((function(a){n.a.arrNotEmpty(a)&&a.forEach((function(e){var a=n.a.getOAuth2BearerValue(e.schema,e.value),r={id:n.a.randomMd5(),name:e.name,content:a,require:!0,description:"",enums:null,enumsMode:"default",new:!1};"header"==e.in&&t.api.securityFlag&&t.api.securityKeys.includes(e.key)&&t.addDebugHeader(r)})),t.updateHeaderFromCacheApi(e),t.addNewLineHeader(),t.initSelectionHeaders(),t.headerResetCalc()}))},updateHeaderFromCacheApi:function(e){var t=this;if(this.enableRequestCache&&n.a.checkUndefined(e)){var a=e.headerData;this.headerData.forEach((function(e){if(!n.a.strNotBlank(e.content)){var r=a.filter((function(t){return t.name==e.name}));r.length>0&&(t.oAuthApi?"Authorization"!=e.name&&(e.content=r[0].content):e.content=r[0].content)}}))}},updateUrlFormCacheApi:function(e){if(this.enableRequestCache&&n.a.checkUndefined(e)){var t=e.urlFormData;this.urlFormData.forEach((function(e){if(!n.a.strNotBlank(e.content)){var a=t.filter((function(t){return t.name==e.name}));a.length>0&&(e.content=a[0].content)}}))}},updateRawFormCacheApi:function(e){if(this.enableRequestCache&&n.a.checkUndefined(e)){var t=e.rawFormData;this.rawFormData.forEach((function(e){if(!n.a.strNotBlank(e.content)){var a=t.filter((function(t){return t.name==e.name}));a.length>0&&(e.content=a[0].content)}})),this.rawText=e.rawText}},syncFromOAuth2:function(){var e="SELFOAuth"+this.swaggerInstance.id;if(window.localStorage){var t=window.localStorage.getItem(e);if(n.a.strNotBlank(t))return n.a.json5parse(t)}return null},updateFormCacheApi:function(e){if(this.enableRequestCache&&n.a.checkUndefined(e)){var t=e.formData;this.formData.forEach((function(e){if(!n.a.strNotBlank(e.content)){var a=t.filter((function(t){return t.name==e.name}));a.length>0&&(e.content=a[0].content)}}))}},initBodyParameter:function(e){var t=this.globalParameters.filter((function(e){return"header"!=e.in})),a=this.api.parameters,r=[],i=[];if(t.length>0&&t.forEach((function(e){if(n.a.arrNotEmpty(a)){var t=!0;a.forEach((function(a){e.name==a.name&&e.in==a.in&&n.a.strNotBlank(a.txtValue)&&(t=!1)})),t&&r.push(e)}else r.push(e)})),n.a.arrNotEmpty(a)&&a.forEach((function(e){if(n.a.arrNotEmpty(t)){var a=!0;t.forEach((function(t){t.name==e.name&&t.in==e.in&&(n.a.strNotBlank(e.txtValue)||(a=!1))})),a&&i.push(e)}else i.push(e)})),n.a.arrNotEmpty(this.authorizeQueryParameters)&&this.authorizeQueryParameters.forEach((function(e){r.push(e)})),r.length,i.length,n.a.arrNotEmpty(i))if(1==i.filter((function(e){return"body"==e.in})).length){var o=i.filter((function(e){return"body"!=e.in&&"header"!=e.in}));this.addGlobalParameterToRawForm(r),o.length>0&&(this.rawFormFlag=!0,this.addApiParameterToRawForm(o)),n.a.arrNotEmpty(this.rawFormData)&&(this.rawFormFlag=!0),this.showTabRaw(),this.addApiParameterToRaw(i),this.updateRawFormCacheApi(e),this.rawFormFlag&&this.initFirstRawFormValue()}else{i.filter((function(e){return"MultipartFile"==e.schemaValue||"file"==e.schemaValue||"file"==e.type||"formData"==e.in||"formdata"==e.in})).length>0?(this.showTabForm(),this.addGlobalParameterToForm(r),this.addApiParameterToForm(i),this.updateFormCacheApi(e),this.initFirstFormValue()):(this.showTabUrlForm(),this.addGlobalParameterToUrlForm(r),this.addApiParameterToUrlForm(i),this.updateUrlFormCacheApi(e),this.initUrlFormValue())}else"raw"==this.api.contentValue?(this.showTabRaw(),this.initFirstRawFormValue()):(this.showTabUrlForm(),this.addGlobalParameterToUrlForm(r),this.addApiParameterToUrlForm(i),this.updateUrlFormCacheApi(e),this.initUrlFormValue());this.updateScriptFromCache(e),this.updateHeaderFromCacheApi(e),this.hideDynamicParameterTable()},updateScriptFromCache:function(e){n.a.checkUndefined(e)&&n.a.strNotBlank(e.rawScript)&&(this.rawScript=e.rawScript)},hideDynamicParameterTable:function(){this.enableDynamicParameter||(0==this.headerData.length?this.headerTableFlag=!1:this.headerTableFlag=!0,0==this.urlFormData.length?this.urlFormTableFlag=!1:this.urlFormTableFlag=!0,0==this.formData.length?this.formTableFlag=!1:this.formTableFlag=!0,0==this.rawFormData.length?this.rawFormTableFlag=!1:this.rawFormTableFlag=!0),this.initSelectionHeaders(),this.headerResetCalc()},addNewLineHeader:function(){var e=this;if(this.enableDynamicParameter){var t={id:n.a.randomMd5(),name:"",content:"",require:!1,description:"",enums:null,enumsMode:"default",new:!0};setTimeout((function(){return e.addDebugHeader(t)}),100)}this.hideDynamicParameterTable()},addDebugHeader:function(e){if(n.a.strNotBlank(e.name)){var t=this.headerData.filter((function(t){return t.name==e.name}));n.a.strBlank(e.content)?0==t.length&&this.headerData.push(e):this.headerData.push(e)}else this.headerData.push(e)},initFirstFormValue:function(){this.addNewLineFormValue(),this.initFormSelections()},initFormSelections:function(e){var t=this;n.a.strNotBlank(e)?0==this.rowFormSelection.selectedRowKeys.filter((function(t){return t==e})).length&&this.rowFormSelection.selectedRowKeys.push(e):this.formData.forEach((function(e){e.require&&t.rowFormSelection.selectedRowKeys.push(e.id)}))},initRawFormSelections:function(e){var t=this;n.a.strNotBlank(e)?0==this.rowRawFormSelection.selectedRowKeys.filter((function(t){return t==e})).length&&this.rowRawFormSelection.selectedRowKeys.push(e):this.rawFormData.forEach((function(e){e.require&&t.rowRawFormSelection.selectedRowKeys.push(e.id)}))},initUrlFormSelections:function(e){var t=this;n.a.strNotBlank(e)?0==this.rowUrlFormSelection.selectedRowKeys.filter((function(t){return t==e})).length&&this.rowUrlFormSelection.selectedRowKeys.push(e):this.urlFormData.forEach((function(e){e.require&&t.rowUrlFormSelection.selectedRowKeys.push(e.id)}))},showTabForm:function(){this.formFlag=!0,this.rawFlag=!1,this.rawTypeFlag=!1,this.formatFlag=!1,this.urlFormFlag=!1,this.requestContentType="form-data",this.toggleBeautifyButtonStatus()},showTabUrlForm:function(){this.urlFormFlag=!0,this.rawFlag=!1,this.rawTypeFlag=!1,this.formFlag=!1,this.requestContentType="x-www-form-urlencoded",this.toggleBeautifyButtonStatus()},showTabRaw:function(){this.rawFlag=!0,this.rawMode=this.api.contentMode,this.rawDefaultText=this.api.contentShowValue,this.rawTypeFlag=!0,this.formFlag=!1,this.urlFormFlag=!1,this.rawText=n.a.toString(this.api.requestValue,""),this.api.xmlRequest&&(this.rawRequestType="application/xml"),this.requestContentType="raw",this.toggleBeautifyButtonStatus()},getEnumOptions:function(e){var t=n.a.propValue("enum",e,null),a=null;if(n.a.checkUndefined(t)){var r=[];t.forEach((function(e){r.push({value:e,label:e})})),a=r}return a},addNewLineFormValue:function(){if(this.enableDynamicParameter){var e={id:n.a.randomMd5(),name:"",type:"text",require:!1,target:null,multipart:!1,content:"",description:"",enums:null,enumsMode:"default",new:!0};this.formData.push(e)}else this.hideDynamicParameterTable()},addGlobalParameterToRawForm:function(e){var t=this;n.a.arrNotEmpty(e)&&e.forEach((function(e){var a={id:n.a.randomMd5(),name:e.name,type:"text",require:!1,target:null,multipart:!1,content:e.value,description:"",enums:null,enumsMode:"default",new:!1};t.rawFormData.push(a)}))},addGlobalParameterToForm:function(e){var t=this;n.a.arrNotEmpty(e)&&e.forEach((function(e){var a={id:n.a.randomMd5(),name:e.name,type:"text",require:!1,target:null,multipart:!1,content:e.value,description:"",enums:null,enumsMode:"default",new:!1};t.formData.push(a)}))},addApiParameterToRaw:function(e){var t=this;if(n.a.arrNotEmpty(e)){var a=e.filter((function(e){return"header"==e.in}));a.length>0&&a.forEach((function(e){var a={id:n.a.randomMd5(),name:e.name,require:e.require,content:e.txtValue,description:n.a.propValue("description",e,""),enums:t.getEnumOptions(e),enumsMode:"default",new:!1};null!=a.enums&&(n.a.strNotBlank(a.content)||(a.content=a.enums[0].value)),t.addDebugHeader(a)}))}},addApiParameterToForm:function(e){var t=this;n.a.arrNotEmpty(e)&&e.forEach((function(e){if("header"==e.in){var a={id:n.a.randomMd5(),name:e.name,require:e.require,content:e.txtValue,description:n.a.propValue("description",e,""),enums:t.getEnumOptions(e),enumsMode:"default",new:!1};null!=a.enums&&(n.a.strNotBlank(a.content)||(a.content=a.enums[0].value)),t.addDebugHeader(a)}else{var r="text",i=!1;"MultipartFile"!=e.schemaValue&&"file"!=e.schemaValue&&"file"!=e.type||(r="file","array"==e.type&&(i=!0));var o={id:n.a.randomMd5(),name:e.name,type:r,require:e.require,target:null,multipart:i,content:e.txtValue,description:n.a.propValue("description",e,""),enums:t.getEnumOptions(e),enumsMode:"default",new:!1};null!=o.enums&&(n.a.strNotBlank(o.content)||(o.content=o.enums[0].value)),t.formData.push(o)}}))},addGlobalParameterToUrlForm:function(e){var t=this;n.a.arrNotEmpty(e)&&e.forEach((function(e){var a={id:n.a.randomMd5(),name:e.name,type:"text",require:!1,target:null,content:e.value,description:"",enums:null,enumsMode:"default",new:!1};t.urlFormData.push(a)}))},addApiParameterToRawForm:function(e){var t=this;n.a.arrNotEmpty(e)&&e.forEach((function(e){if("header"==e.in){var a={id:n.a.randomMd5(),name:e.name,require:e.require,content:e.txtValue,description:n.a.propValue("description",e,""),enums:t.getEnumOptions(e),enumsMode:"default",new:!1};null!=a.enums&&(n.a.strNotBlank(a.content)||(a.content=a.enums[0].value)),t.addDebugHeader(a)}else{var r={id:n.a.randomMd5(),name:e.name,type:"text",require:e.require,target:null,content:e.txtValue,description:n.a.propValue("description",e,""),enums:t.getEnumOptions(e),enumsMode:"default",new:!1};null!=r.enums&&(n.a.strNotBlank(r.content)||(r.content=r.enums[0].value)),t.rawFormData.push(r)}}))},addApiParameterToUrlForm:function(e){var t=this;n.a.arrNotEmpty(e)&&e.forEach((function(e){if("header"==e.in){var a={id:n.a.randomMd5(),name:e.name,require:e.require,content:e.txtValue,description:n.a.propValue("description",e,""),enums:t.getEnumOptions(e),enumsMode:"default",new:!1};null!=a.enums&&(n.a.strNotBlank(a.content)||(a.content=a.enums[0].value)),t.addDebugHeader(a)}else{var r="default";n.a.arrNotEmpty(e.enum)&&"array"==e.type&&(r="multiple");var i={id:n.a.randomMd5(),name:e.name,type:"text",require:e.require,target:null,content:e.txtValue,description:n.a.propValue("description",e,""),enums:t.getEnumOptions(e),enumsMode:r,new:!1};null!=i.enums&&(n.a.strNotBlank(i.content)||(i.content=i.enums[0].value)),t.urlFormData.push(i)}}))},addNewLineUrlFormValue:function(){if(this.enableDynamicParameter){var e={id:n.a.randomMd5(),name:"",type:"text",require:!1,target:null,content:"",description:"",enums:null,enumsMode:"default",new:!0};this.urlFormData.push(e)}else this.hideDynamicParameterTable()},addNewLineRawFormValue:function(){if(this.enableDynamicParameter){var e={id:n.a.randomMd5(),name:"",type:"text",require:!1,target:null,content:"",description:"",enums:null,enumsMode:"default",new:!0};this.rawFormData.push(e)}else this.hideDynamicParameterTable()},initFirstRawFormValue:function(){this.addNewLineRawFormValue(),this.initRawFormSelections()},initUrlFormValue:function(){this.addNewLineUrlFormValue(),this.initUrlFormSelections()},initShowFormTable:function(){"x-www-form-urlencoded"==this.requestContentType?(this.urlFormFlag=!0,this.formFlag=!1,this.rawFlag=!1,this.rawTypeFlag=!1):"form-data"==this.requestContentType?(this.formFlag=!0,this.urlFormFlag=!1,this.rawFlag=!1,this.rawTypeFlag=!1):"raw"==this.requestContentType&&(this.rawFlag=!0,this.rawTypeFlag=!0,this.urlFormFlag=!1,this.formFlag=!1),this.toggleBeautifyButtonStatus()},initSelectionHeaders:function(e){var t=this;n.a.strNotBlank(e)?0==this.rowSelection.selectedRowKeys.filter((function(t){return t==e})).length&&this.rowSelection.selectedRowKeys.push(e):this.headerData.forEach((function(e){e.require&&t.rowSelection.selectedRowKeys.push(e.id)}))},headerContentEnumChnage:function(e,t){var a=t.context.$attrs["data-key"];this.headerContentChnageUpdate(e,a)},headerCookieValue:function(e){"cookie"==e.name.toLowerCase()&&(document.cookie=e.content)},headerContentChnage:function(e){var t=e.target.value,a=e.target.getAttribute("data-key");this.headerContentChnageUpdate(t,a)},headerContentChnageUpdate:function(e,t){var a=this,r=this.headerData.filter((function(e){return e.id==t}))[0];r.new?(this.headerData.forEach((function(t){t.id==r.id&&(t.content=e,t.new=!1,a.headerCookieValue(t))})),this.addNewLineHeader()):this.headerData.forEach((function(t){t.id==r.id&&(t.content=e,t.new=!1,a.headerCookieValue(t))})),this.initSelectionHeaders(r.id),this.headerResetCalc()},headerNameFilterOption:function(e,t){return t.componentOptions.children[0].text.toUpperCase().indexOf(e.toUpperCase())>=0},headerSelect:function(e,t){this.headerSelectName=e;var a=t.context.$attrs["data-id"];this.headerData.forEach((function(t){t.id==a&&(t.name=e,t.new=!1)}))},headerSearch:function(e){this.headerSelectName=e},headerNameChange:function(e){var t=this;e.new?(this.headerData.forEach((function(a){a.id==e.id&&(a.name=t.headerSelectName,a.new=!1)})),this.addNewLineHeader()):this.headerData.forEach((function(a){a.id==e.id&&(a.name=t.headerSelectName,a.new=!1)})),this.initSelectionHeaders(e.id),this.headerResetCalc()},headerDelete:function(e){var t=[];this.headerData.forEach((function(a){a.id!=e.id&&t.push(a)})),this.headerData=t,this.headerResetCalc()},headerResetCalc:function(){var e=this.headerData.filter((function(e){return 0==e.new}));e.length>0?(this.headerCountFlag=!0,this.headerCount=e.length):(this.headerCountFlag=!1,this.headerCount=0)},requestContentTypeChange:function(e){this.requestContentType=e.target.value,this.initShowFormTable()},formDelete:function(e){var t=[];this.formData.forEach((function(a){a.id!=e.id&&t.push(a)})),this.formData=t},formFileUploadClick:function(e){document.getElementById("file"+e.id).click()},formNameChange:function(e){var t=e.target.value,a=e.target.getAttribute("data-key"),r=this.formData.filter((function(e){return e.id==a}))[0];r.new?(this.formData.forEach((function(e){e.id==r.id&&(e.name=t,e.new=!1)})),this.addNewLineFormValue()):this.formData.forEach((function(e){e.id==r.id&&(e.name=t,e.new=!1)})),this.initFormSelections(r.id)},formTypeChange:function(e,t){var a=e.split("-"),r=a[0],n=a[1];this.formData.forEach((function(e){e.id==n&&(e.content="",e.type=r)}))},formFileChange:function(e){for(var t=e.target.files,a=[],r=0;r<t.length;r++)a.push(t[r].name);var n=a.join(","),i=e.target,o=i.getAttribute("data-key"),s=this.formData.filter((function(e){return e.id==o}))[0];s.new?(this.formData.forEach((function(e){e.id==s.id&&(e.content=n,e.target=i,e.new=!1)})),this.addNewLineFormValue()):this.formData.forEach((function(e){e.id==s.id&&(e.content=n,e.target=i,e.new=!1)})),this.initFormSelections(s.id)},formContentUpdate:function(e,t){var a=this.formData.filter((function(e){return e.id==t}))[0];a.new?(this.formData.forEach((function(t){t.id==a.id&&(t.content=e,t.new=!1)})),this.addNewLineFormValue()):this.formData.forEach((function(t){t.id==a.id&&(t.content=e,t.new=!1)})),this.initFormSelections(a.id)},formContentEnumChange:function(e,t){var a=t.context.$attrs["data-key"];this.formContentUpdate(e,a)},formContentChange:function(e){var t=e.target.value,a=e.target.getAttribute("data-key");this.formContentUpdate(t,a)},rawFormDelete:function(e){var t=[];this.rawFormData.forEach((function(a){a.id!=e.id&&t.push(a)})),this.rawFormData=t},urlFormDelete:function(e){var t=[];this.urlFormData.forEach((function(a){a.id!=e.id&&t.push(a)})),this.urlFormData=t},rawFormNameChange:function(e){var t=e.target.value,a=e.target.getAttribute("data-key"),r=this.rawFormData.filter((function(e){return e.id==a}))[0];r.new?(this.rawFormData.forEach((function(e){e.id==r.id&&(e.name=t,e.new=!1)})),this.addNewLineRawFormValue()):this.rawFormData.forEach((function(e){e.id==r.id&&(e.name=t,e.new=!1)})),this.initRawFormSelections(r.id)},urlFormNameChange:function(e){var t=e.target.value,a=e.target.getAttribute("data-key"),r=this.urlFormData.filter((function(e){return e.id==a}))[0];r.new?(this.urlFormData.forEach((function(e){e.id==r.id&&(e.name=t,e.new=!1)})),this.addNewLineUrlFormValue()):this.urlFormData.forEach((function(e){e.id==r.id&&(e.name=t,e.new=!1)})),this.initUrlFormSelections(r.id)},rawFormContentUpdate:function(e,t){var a=this.rawFormData.filter((function(e){return e.id==t}))[0];a.new?(this.rawFormData.forEach((function(t){t.id==a.id&&(t.content=e,t.new=!1)})),this.addNewLineRawFormValue()):this.rawFormData.forEach((function(t){t.id==a.id&&(t.content=e,t.new=!1)})),this.initRawFormSelections(a.id)},rawFormContentEnumChange:function(e,t){var a=t.context.$attrs["data-key"];this.rawFormContentUpdate(e,a)},rawFormContentChange:function(e){var t=e.target.value,a=e.target.getAttribute("data-key");this.rawFormContentUpdate(t,a)},urlFormContentUpdate:function(e,t){var a=this.urlFormData.filter((function(e){return e.id==t}))[0];a.new?(this.urlFormData.forEach((function(t){t.id==a.id&&(t.content=e,t.new=!1)})),this.addNewLineUrlFormValue()):this.urlFormData.forEach((function(t){t.id==a.id&&(t.content=e,t.new=!1)})),this.initUrlFormSelections(a.id)},urlFormContentEnumChange:function(e,t){if(n.a.checkUndefined(t)){var a;a=Array.isArray(t)?t[0].context.$attrs["data-key"]:t.context.$attrs["data-key"],this.urlFormContentUpdate(e,a)}},urlFormContentChange:function(e){var t=e.target.value,a=e.target.getAttribute("data-key");this.urlFormContentUpdate(t,a)},rawMenuClick:function(e){var t=e.item,a=e.key;e.keyPath,this.rawMode=t.$el.getAttribute("data-mode"),this.rawRequestType=t.$el.getAttribute("data-mode-type"),this.rawDefaultText=a,this.toggleBeautifyButtonStatus()},beautifyJson:function(){var e=this.rawText;if(n.a.strNotBlank(e))try{var t=n.a.json5stringify(n.a.json5parse(e));this.rawText=t}catch(e){}},toggleBeautifyButtonStatus:function(){var e=!1;this.rawFlag&&"json"==this.rawMode&&(e=!0),this.formatFlag=e},rawScriptChange:function(e){this.rawScript=e},rawChange:function(e){this.rawText=e},sendRestfulApi:function(e){e.preventDefault();var t=this.validateCommonHeaders();t.validate?this.rawFlag?this.debugSendRawRequest():this.formFlag?this.debugSendFormRequest():this.urlFormFlag&&this.debugSendUrlFormRequest():this.$message.info(t.message)},callChildEditorShow:function(){this.bigFlag||this.$refs.childDebugResponse.showEditorFieldDescription()},debugHeaders:function(){var e=this,t={},a=this.api;if(null!=a.produces&&null!=a.produces&&a.produces.length>0){var r=a.produces[0];t.Accept=r}return this.headerData.forEach((function(a){a.new||e.rowSelection.selectedRowKeys.filter((function(e){return e==a.id})).length>0&&n.a.strNotBlank(a.name)&&"cookie"!=a.name.toLowerCase()&&(n.a.isChinese(a.content)?t[a.name]=encodeURIComponent(a.content):t[a.name]=n.a.toString(a.content,""))})),t["Request-Origion"]="Knife4j",n.a.checkUndefined(t["Content-Type"])||(this.rawFlag?t["Content-Type"]=this.rawRequestType:this.urlFormFlag?t["Content-Type"]="application/x-www-form-urlencoded":this.formFlag&&(this.validateFormDataContaintsFile()?t["Content-Type"]="multipart/form-data":t["Content-Type"]="application/x-www-form-urlencoded")),n.a.checkUndefined(this.routeHeader)&&(t["knfie4j-gateway-request"]=this.routeHeader),this.swaggerInstance.desktop&&(t["knife4j-gateway-code"]=this.swaggerInstance.desktopCode),t},debugRawFormParams:function(){var e=this,t={};return this.rawFormData.forEach((function(a){a.new||e.rowRawFormSelection.selectedRowKeys.filter((function(e){return e==a.id})).length>0&&n.a.strNotBlank(a.name)&&(t[a.name]=a.content)})),t},debugUrlFormParams:function(){var e=this,t={};return this.urlFormData.forEach((function(a){a.new||e.rowUrlFormSelection.selectedRowKeys.filter((function(e){return e==a.id})).length>0&&n.a.strNotBlank(a.name)&&(t[a.name]=a.content)})),t},debugFormDataParams:function(e){var t=this,a={url:"",params:{}},r=this.debugUrl;if(e){var i=new FormData;this.formData.forEach((function(e){if(!e.new&&(t.rowFormSelection.selectedRowKeys.filter((function(t){return t==e.id})).length>0&&n.a.strNotBlank(e.name)))if("text"==e.type)if(t.debugPathFlag)if(-1==t.debugPathParams.indexOf(e.name))n.a.strNotBlank(e.content)&&i.append(e.name,e.content);else{var a="{"+e.name+"}";r=r.replace(a,e.content)}else n.a.strNotBlank(e.content)&&i.append(e.name,e.content);else if(n.a.checkUndefined(e.target)){var o=e.target.files;if(o.length>0)for(var s=0;s<o.length;s++)i.append(e.name,o[s])}})),a.params=i}else{var o={};this.formData.forEach((function(e){if(!e.new&&(t.rowFormSelection.selectedRowKeys.filter((function(t){return t==e.id})).length>0&&n.a.strNotBlank(e.name)))if(t.debugPathFlag)if(-1==t.debugPathParams.indexOf(e.name))o[e.name]=e.content;else{var a="{"+e.name+"}";r=r.replace(a,e.content)}else o[e.name]=e.content})),a.params=o}return a.url=r,a},debugStreamFlag:function(){var e=!1,t=this.api;null!=t.produces&&null!=t.produces&&t.produces.length>0&&(t.produces[0],e=n.a.binaryContentType(t.produces,null).binary);return e},validateCommonHeaders:function(){for(var e=!0,t="",a=0;a<this.headerData.length;a++){var r=this.headerData[a];if(!r.new)if(this.rowSelection.selectedRowKeys.filter((function(e){return e==r.id})).length>0&&n.a.strNotBlank(r.name)&&r.require&&!n.a.strNotBlank(r.content)){e=!1,t=this.i18n.validate.header+r.name+this.i18n.validate.notEmpty;break}}return{validate:e,message:t}},validateFormData:function(){for(var e=!0,t="",a=0;a<this.formData.length;a++){var r=this.formData[a];if(!r.new)if(this.rowFormSelection.selectedRowKeys.filter((function(e){return e==r.id})).length>0&&n.a.strNotBlank(r.name)&&r.require)if("text"==r.type){if(!n.a.strNotBlank(r.content)){e=!1,t=r.name+this.i18n.validate.notEmpty;break}}else if(null==r.target){e=!1,t=r.name+this.i18n.validate.fileNotEmpty;break}}return{validate:e,message:t}},validateRawForm:function(){for(var e=!0,t="",a=0;a<this.rawFormData.length;a++){var r=this.rawFormData[a];if(!r.new)if(this.rowRawFormSelection.selectedRowKeys.filter((function(e){return e==r.id})).length>0&&n.a.strNotBlank(r.name)&&r.require&&!n.a.strNotBlank(r.content)){e=!1,t=r.name+this.i18n.validate.notEmpty;break}}return{validate:e,message:t}},validateUrlForm:function(){for(var e=!0,t="",a=0;a<this.urlFormData.length;a++){var r=this.urlFormData[a];if(!r.new)if(this.rowUrlFormSelection.selectedRowKeys.filter((function(e){return e==r.id})).length>0&&n.a.strNotBlank(r.name)&&r.require&&!n.a.strNotBlank(r.content)){e=!1,t=r.name+this.i18n.validate.notEmpty;break}}return{validate:e,message:t}},validateFormDataContaintsFile:function(){var e=this,t=!1;return this.formData.forEach((function(a){a.new||e.rowFormSelection.selectedRowKeys.filter((function(e){return e==a.id})).length>0&&"file"==a.type&&(t=!0)})),t},checkUrlParams:function(e){var t=e.indexOf("?"),a={result:!1,params:{},url:e};if(t>-1){var r=e.substring(t+1);if(a.url=e.substring(0,t),a.result=!0,n.a.strNotBlank(r))r.split("&").forEach((function(e){if(n.a.strNotBlank(e)){var t=e.split("=");2==t.length&&(a.params[t[0]]=t[1])}}))}return a},debugSendHasCookie:function(e){var t=!1;if(n.a.checkUndefined(e)){var a=Object.keys(e);if(n.a.arrNotEmpty(a))if(a.filter((function(e){return"cookie"===e.toLocaleLowerCase()})).length>0){var r=e.Cookie;n.a.strNotBlank(r)&&(document.cookie=r,t=!0)}}return t},applyRequestParams:function(e,t){var a=null;return["post","put","patch"].includes(t.toLowerCase())?n.a.checkUndefined(e)&&(a=e):a=e,{data:null,params:a}},debugCheckUrl:function(e){var t=e;try{if(new RegExp(".*?({.*?})$","ig").test(e)){var a=RegExp.$1;t=e.replace(a,"")}}catch(e){window.console}return t},debugSendUrlFormRequest:function(){var e=this,t=this.validateUrlForm();if(t.validate){this.debugLoading=!0,this.debugSend=!0;var a=this.debugHeaders(),i=this.debugUrl,o=this.debugMethodType.toLowerCase(),s=this.debugUrlFormParams();if(this.debugPathFlag){var l={};for(var u in this.debugPathParams.forEach((function(e){var t="{"+e+"}",a=n.a.getValue(s,e,"",!0);i=i.replace(t,a)})),s)-1==this.debugPathParams.indexOf(u)&&(l[u]=s[u]);s=l}var d=this.checkUrlParams(i);d.result&&(i=d.url,s=Object.assign(s,d.params));var c="";this.enableHost&&(c=this.enableHostText);var m=this.applyRequestParams(s,o),p={baseURL:c,url:this.debugCheckUrl(i),method:o,headers:a,params:m.params,timeout:0,withCredentials:this.debugSendHasCookie(a),data:m.data};this.oas2?this.debugStreamFlag()&&(p=Object(r.a)(Object(r.a)({},p),{},{responseType:"blob"})):p=Object(r.a)(Object(r.a)({},p),{},{responseType:"blob"});var f=h.a.create();f.interceptors.request.use((function(e){var t=e.url;if("get"===e.method&&e.params){t+="?";for(var a=0,r=Object.keys(e.params);a<r.length;a++){var i=r[a];n.a.strNotBlank(e.params[i])&&(t+="".concat(encodeURIComponent(i),"=").concat(encodeURIComponent(e.params[i]),"&"))}t=t.substring(0,t.length-1),e.params={}}return e.url=t,e}));var g=new Date;f.request(p).then((function(t){e.debugLoading=!1,e.handleDebugSuccess(g,new Date,t)})).catch((function(t){e.debugLoading=!1,t.response?e.handleDebugError(g,new Date,t.response):e.$message.error(t.message)}))}else this.$message.info(t.message)},debugSendFormRequest:function(){var e=this,t=this.validateFormData();if(t.validate){this.debugLoading=!0,this.debugSend=!0;var a=this.debugHeaders(),n=this.debugUrl,i=this.debugMethodType.toLowerCase(),o=this.validateFormDataContaintsFile(),s=this.debugFormDataParams(o);n=s.url;var l=s.params,u="";this.enableHost&&(u=this.enableHostText);var d={baseURL:u,url:this.debugCheckUrl(n),method:i,headers:a,timeout:0,withCredentials:this.debugSendHasCookie(a),data:null};if(o)d=Object(r.a)(Object(r.a)({},d),{},{data:l});else{var c=this.checkUrlParams(n);c.result&&(n=c.url,l=Object.assign(l,c.params)),d=Object(r.a)(Object(r.a)({},d),{},{params:l})}this.debugStreamFlag()&&(d=Object(r.a)(Object(r.a)({},d),{},{responseType:"blob"}));var m=h.a.create(),p=new Date;m.request(d).then((function(t){e.debugLoading=!1,e.handleDebugSuccess(p,new Date,t)})).catch((function(t){e.debugLoading=!1,t.response?e.handleDebugError(p,new Date,t.response):e.$message.error(t.message)}))}else this.$message.info(t.message)},debugSendRawRequest:function(){var e=this,t=this.validateRawForm();if(t.validate){this.debugLoading=!0,this.debugSend=!0;var a=this.debugHeaders(),i=this.debugUrl,o=this.debugMethodType.toLowerCase(),s=this.rawText,l=this.debugRawFormParams();if(this.debugPathFlag){var u={};for(var d in this.debugPathParams.forEach((function(e){var t="{"+e+"}",a=n.a.getValue(l,e,"",!0);i=i.replace(t,a)})),l)-1==this.debugPathParams.indexOf(d)&&(u[d]=l[d]);l=u}var c=this.checkUrlParams(i);c.result&&(i=c.url,l=Object.assign(l,c.params));var m="";this.enableHost&&(m=this.enableHostText);var p={baseURL:m,url:this.debugCheckUrl(i),method:o,headers:a,params:l,data:s,withCredentials:this.debugSendHasCookie(a),timeout:0};this.debugStreamFlag()&&(p=Object(r.a)(Object(r.a)({},p),{},{responseType:"blob"}));var f=new Date;h.a.create().request(p).then((function(t){e.debugLoading=!1,e.handleDebugSuccess(f,new Date,t)})).catch((function(t){e.debugLoading=!1,t.response?e.handleDebugError(f,new Date,t.response):e.$message.error(t.message)}))}else this.$message.info(t.message)},callAfterScript:function(e,t){var a=this.swaggerInstance.id,r=this.swaggerInstance.allGroupIds,n=new d({allgroupids:r,groupid:a,response:{data:e,headers:t}});try{new Function("ke",this.rawScript)(n),setTimeout((function(){n.global.action()}),1e3)}catch(e){}},resolveOAS3Response:function(e){var t=e.responseText;"application/json"===e.responseTextType&&(t=n.a.json5parse(e.responseText)),this.callAfterScript(t,e.headers)},executeAfterScript:function(e){n.a.strNotBlank(this.rawScript)&&(this.oas2?this.callAfterScript(e.data,e.headers):i.resolveBlobResponse(e,this.resolveOAS3Response))},handleDebugSuccess:function(e,t,a){this.bigFlag=!1,this.bigBlobFlag=!1,this.setResponseBody(a),this.setResponseHeaders(a.headers),this.setResponseRaw(a),this.setResponseStatus(e,t,a),this.setResponseCurl(a.request),this.callChildEditorShow(),this.executeAfterScript(a),this.storeApiParams()},handleDebugError:function(e,t,a){this.bigFlag=!1,this.bigBlobFlag=!1,this.setResponseBody(a),this.setResponseHeaders(a.headers),this.setResponseRaw(a),this.setResponseStatus(e,t,a),this.setResponseCurl(a.request),this.callChildEditorShow(),this.storeApiParams()},storeApiParams:function(){if(this.enableRequestCache){var e={headerData:[],formData:[],urlFormData:[],rawFormData:[],rawText:""},t=s.a.debugCacheApiId+this.api.id;e.headerData=this.headerData.filter((function(e){return 0==e.new})),e.formData=this.formData.filter((function(e){return 0==e.new})),e.urlFormData=this.urlFormData.filter((function(e){return 0==e.new})),e.rawFormData=this.rawFormData.filter((function(e){return 0==e.new})),e.rawText=this.rawText,e.rawScript=this.rawScript,this.$localStore.setItem(t,e)}},setResponseHeaders:function(e){var t=[];if(n.a.checkUndefined(e))for(var a in e){var r={id:n.a.randomMd5(),name:a,value:e[a]};t.push(r)}this.responseHeaders=t},setResponseRaw:function(e){if(n.a.checkUndefined(e)){var t=e.request;if(e.headers,n.a.checkUndefined(t)&&"blob"!=t.responseType){var a=n.a.toString(t.responseText,"");this.responseRawText=a}}},setResponseStatus:function(e,t,a){if(n.a.checkUndefined(a)){var r=a.request;if(n.a.checkUndefined(r)){var i="",o=t.getTime()-e.getTime(),s=r.status;if(o>1e3)i=Math.floor(o/1e3).toFixed(1)+"s";else i=o+"ms";var l=0;"blob"==r.responseType?l=r.response.size:n.a.checkUndefined(r.responseText)&&(l=r.responseText.gblen()),this.responseStatus={code:s,cost:i,size:l}}}},setResponseCurl:function(e){var t=this,a=this,r=this.debugCheckUrl(this.debugUrl),i=new Array,o="http",s=window.location.href;new RegExp("^https.*","ig").test(s)&&(o="https");var l="";l=new RegExp("^(http|https):.*","ig").test(this.api.host)?this.api.host:o+"://"+this.api.host,this.enableHost&&(l=this.enableHostText),r.startWith("/")||(l+="/"),l+=r,i.push("curl"),i.push("-X",this.debugMethodType.toUpperCase());var u=this.debugHeaders(),d=[];if(d.push("knfie4j-gateway-request"),d.push("knife4j-gateway-code"),d.push("Request-Origion"),n.a.checkUndefined(u))for(var c in u)d.includes(c)||(i.push("-H "),i.push('"'+c+":"+u[c]+'"'));if(this.rawFlag){var h=this.debugRawFormParams(),m=[];if(n.a.checkUndefined(h))for(var p in h)if(a.debugPathFlag)if(-1==a.debugPathParams.indexOf(p))m.push(p+"="+n.a.toString(h[p],""));else{var f="{"+p+"}",g=n.a.toString(h[p],"");l=l.replace(f,g)}else m.push(p+"="+n.a.toString(h[p],""));var w=m.join("&");if(n.a.strNotBlank(w)&&(l=-1==l.indexOf("?")?l+"?"+w:l+"&"+w),n.a.strNotBlank(this.rawText))try{var b=JSON.parse(this.rawText),v=JSON.stringify(b).replace(/\\n/g,"").replace(/"/g,'\\"');i.push("-d"),i.push('"'+v+'"')}catch(e){v=this.rawText.replace(/\\n/g,"").replace(/"/g,'\\"'),i.push("-d"),i.push('"'+v+'"')}}else if(this.urlFormFlag){var F=this.debugUrlFormParams();if(n.a.checkUndefined(F)){for(var p in m=[],F)a.debugPathFlag?-1==a.debugPathParams.indexOf(p)?m.push(p+"="+n.a.toString(F[p],"")):(f="{"+p+"}",g=n.a.toString(F[p],""),l=l.replace(f,g)):m.push(p+"="+n.a.toString(F[p],""));w=m.join("&"),n.a.strNotBlank(w)&&("get"==this.debugMethodType.toLowerCase()||"delete"==this.debugMethodType.toLowerCase()?l=-1==l.indexOf("?")?l+"?"+w:l+"&"+w:(i.push("--data-urlencode "),i.push('"'+w+'"')))}}else if(this.formFlag){var y=this.debugFormCurlParams();if(n.a.checkUndefined(y))if(this.validateFormDataContaintsFile())this.formData.forEach((function(e){e.new||t.rowFormSelection.selectedRowKeys.filter((function(t){return t==e.id})).length>0&&n.a.strNotBlank(e.name)&&(i.push("-F "),"text"==e.type?i.push('"'+e.name+"="+n.a.toString(e.content,"")+'"'):i.push('"'+e.name+"=@"+e.content+'"'))}));else{for(var p in m=[],y)a.debugPathFlag?-1==a.debugPathParams.indexOf(p)?m.push(p+"="+n.a.toString(y[p],"")):(f="{"+p+"}",g=n.a.toString(y[p],""),l=l.replace(f,g)):m.push(p+"="+n.a.toString(y[p],""));w=m.join("&"),n.a.strNotBlank(w)&&("get"==this.debugMethodType.toLowerCase()||"delete"==this.debugMethodType.toLowerCase()?l=-1==l.indexOf("?")?l+"?"+w:l+"&"+w:(i.push("--data-urlencode "),i.push('"'+w+'"')))}}i.push('"'+encodeURI(l)+'"'),this.responseCurlText=i.join(" ")},debugFormCurlParams:function(){var e=this,t={};return this.formData.forEach((function(a){a.new||e.rowFormSelection.selectedRowKeys.filter((function(e){return e==a.id})).length>0&&n.a.strNotBlank(a.name)&&(t[a.name]=a.content)})),t},setResponseBody:function(e){var t=this;if(n.a.checkUndefined(e)){var a=e.request,r=e.headers;if(n.a.checkUndefined(a)){var i=n.a.propValue("content-type",r,""),o=n.a.propValue("content-disposition",r,"");if("blob"==a.responseType||n.a.strNotBlank(o))if("application/json"==e.data.type||"application/xml"==e.data.type||"text/html"==e.data.type||"text/plain"==e.data.type){var s=new FileReader;s.onload=function(e){var n={responseText:e.target.result,response:e.target.result,responseType:"",status:a.status,statusText:a.statusText,readyState:a.readyState,timeout:a.timeout,withCredentials:a.withCredentials};t.setResponseJsonBody(n,r)},s.readAsText(e.data)}else if("text/html"==i||"text/plain"==i||"application/xml"==i)this.setResponseJsonBody(a,r);else{var l=!1,u="Knife4j.txt";if(n.a.strNotBlank(o)||(o=n.a.propValue("content-disposition",r,"")),n.a.strNotBlank(o))for(var d=o.split(";"),c=0;c<d.length;c++){var h=d[c];if(null!=h&&""!=h){h.toLowerCase().indexOf("inline")>-1&&(l=!0);var m=h.split("=");if(null!=m&&m.length>0){var p=m[0];if(null!=p&&null!=p&&""!=p&&("filename*"==p.toLowerCase().trim()||"filename"==p.toLowerCase().trim())){var f=m[1].replace(/\"/g,"");u=decodeURIComponent(f)}}}}var g=!1;if(-1!=i.indexOf("image"))g=!0;else{["bmp","jpg","png","tif","gif","pcx","tga","exif","fpx","svg","psd","cdr","pcd","dxf","ufo","eps","ai","raw","WMF","webp"].forEach((function(e){u.endsWith(e)&&(g=!0)}))}var w=this.api.produces,b=!1;if(n.a.arrNotEmpty(w)&&w.forEach((function(e){-1!=e.indexOf("image")&&(b=!0)})),g||(g=b),l)this.setResponseJsonBody(a,r);else{var v="";try{v=window.URL?window.URL.createObjectURL(e.data):window.webkitURL.createObjectURL(e.data)}catch(t){window.console&&window.console.error(t);var F=[].concat(e.data),y=new Blob(F);v=window.URL?window.URL.createObjectURL(y):window.webkitURL.createObjectURL(y)}this.responseContent={text:"",mode:"blob",blobFlag:!0,imageFlag:g,blobFileName:u,blobUrl:v,base64:""}}}else this.setResponseJsonBody(a,r)}}},setResponseJsonBody:function(e,t){var a="",r="",i=this.getContentTypeByHeaders(t);if("json"==i){var o=(e.responseText.gblen()/1024).toFixed(1);if(this.bigBlobFlag=o>300,o>150){this.bigFlag=!0;var s=this.i18n.message.debug.contentToBig;this.$message.info(s),i="text"}else if(n.a.strNotBlank(e.responseText))try{a=n.a.json5stringify(n.a.json5parse(e.responseText))}catch(t){a=e.responseText,i="text"}if(n.a.strNotBlank(e.responseText)&&!this.bigFlag&&e.responseText.indexOf("data:image")>-1)if(new RegExp('.*?"(data:image.*?base64.*?)".*',"ig").test(e.responseText))r=RegExp.$1}else if("xml"==i){var l=e.responseText;a=n.a.strNotBlank(l)?(new F).xml(l):l}else a=e.responseText;this.responseContent={text:a,mode:i,blobFlag:!1,imageFlag:!1,blobFileName:"",blobUrl:"",base64:r}},debugEditorChange:function(e){n.a.checkUndefined(this.responseContent)&&(this.responseContent.text=e)},getContentTypeByHeaders:function(e){var t="json",a=n.a.propValue("Content-Type",e,"");return n.a.strNotBlank(a)||(a=n.a.propValue("content-type",e,"")),n.a.strNotBlank(a)&&(t=a.indexOf("json")>=0?"json":a.indexOf("xml")>=0?"xml":a.indexOf("text/html")>=0?"html":"text"),t},debugShowFieldDescriptionChange:function(e){this.responseFieldDescriptionChecked=e}}},C=a("2877"),k=Object(C.a)(y,(function(){var e=this,t=e._self._c;return t("div",{staticClass:"knife4j-debug"},[t("a-spin",{attrs:{tip:"Loading...",spinning:e.debugLoading}},[t("div",{staticClass:"spin-content"},[t("a-row",[t("a-col",{class:"knife4j-debug-api-"+e.debugMethodType.toLowerCase(),attrs:{span:24}},[t("a-input-group",{attrs:{compact:""}},[e.api.securityFlag?t("span",{staticClass:"knife4j-api-summary-method"},[t("a-icon",{staticStyle:{"font-size":"16px"},attrs:{type:"unlock"}})],1):e._e(),t("a-input",{style:e.debugUrlStyle,attrs:{value:e.debugUrl},on:{change:e.debugUrlChange},scopedSlots:e._u([{key:"addonBefore",fn:function(){return[t("a-select",{staticStyle:{width:"110px"},model:{value:e.debugMethodType,callback:function(t){e.debugMethodType=t},expression:"debugMethodType"}},[t("a-select-option",{attrs:{value:"GET"}},[e._v("GET")]),t("a-select-option",{attrs:{value:"POST"}},[e._v("POST")]),t("a-select-option",{attrs:{value:"PUT"}},[e._v("PUT")]),t("a-select-option",{attrs:{value:"PATCH"}},[e._v("PATCH")]),t("a-select-option",{attrs:{value:"DELETE"}},[e._v("DELETE")]),t("a-select-option",{attrs:{value:"COPY"}},[e._v("COPY")]),t("a-select-option",{attrs:{value:"HEAD"}},[e._v("HEAD")]),t("a-select-option",{attrs:{value:"OPTIONS"}},[e._v("OPTIONS")]),t("a-select-option",{attrs:{value:"LINK"}},[e._v("LINK")]),t("a-select-option",{attrs:{value:"UNLINK"}},[e._v("UNLINK")]),t("a-select-option",{attrs:{value:"PURGE"}},[e._v("PURGE")])],1)]},proxy:!0}])}),t("a-button",{staticClass:"knife4j-api-send",attrs:{type:"primary"},domProps:{innerHTML:e._s(e.$t("debug.send"))},on:{click:e.sendRestfulApi}},[e._v("发 送 ")]),e.enableReloadCacheParameter?t("a-button",{on:{click:e.reloadCacheParameter}},[e._v("刷新变量")]):e._e(),t("a-button",{on:{click:e.resetCacheParameter}},[e._v("重置")])],1)],1)],1),t("a-row",{staticClass:"knife4j-debug-tabs"},[t("a-tabs",{attrs:{defaultActiveKey:"2"}},[t("a-tab-pane",{key:"1"},[t("template",{slot:"tab"},[t("span",[e.headerCountFlag?t("a-tag",{staticClass:"knife4j-debug-param-count"},[e._v(e._s(e.headerCount))]):e._e(),t("span",{domProps:{innerHTML:e._s(e.$t("debug.headers"))}},[e._v("请求头部")])],1)]),e.headerTableFlag?t("a-table",{attrs:{bordered:"",size:"small",rowSelection:e.rowSelection,columns:e.headerColumn,pagination:e.pagination,dataSource:e.headerData,rowKey:"id"},scopedSlots:e._u([{key:"headerName",fn:function(a,r){return[t("a-auto-complete",{staticStyle:{width:"100%"},attrs:{"data-id":r.id,value:a,filterOption:e.headerNameFilterOption,allowClear:e.allowClear,dataSource:e.headerAutoOptions,placeholder:e.$t("debug.tableHeader.holderName")},on:{select:e.headerSelect,search:e.headerSearch,change:function(t){return e.headerNameChange(r)}}})]}},{key:"headerValue",fn:function(a,r){return[null!=r.enums?t("a-row",[t("a-select",{staticStyle:{width:"100%"},attrs:{mode:r.enumsMode,defaultValue:a,"data-key":r.id,options:r.enums},on:{change:e.headerContentEnumChnage}})],1):t("a-row",[t("a-input",{class:"knife4j-debug-param-require"+r.require,attrs:{placeholder:null!=r.description&&""!=r.description?r.description:e.$t("debug.tableHeader.holderValue"),"data-key":r.id,defaultValue:a},on:{change:e.headerContentChnage}})],1)]}},{key:"operation",fn:function(a,r){return t("a-row",{},[r.new?e._e():t("a-button",{attrs:{type:"link"},domProps:{innerHTML:e._s(e.$t("debug.tableHeader.holderDel"))},on:{click:function(t){return e.headerDelete(r)}}},[e._v("删除")])],1)}}],null,!1,869428626)}):e._e()],2),t("a-tab-pane",{key:"2",attrs:{tab:e.$t("debug.params"),forceRender:""}},[t("a-row",{staticClass:"knife4j-debug-request-type"},[t("div",{staticClass:"knife4j-debug-request-content-type-float"},[t("a-radio-group",{staticClass:"knife4j-debug-request-content-type",on:{change:e.requestContentTypeChange},model:{value:e.requestContentType,callback:function(t){e.requestContentType=t},expression:"requestContentType"}},[t("a-radio",{attrs:{value:"x-www-form-urlencoded"}},[e._v("x-www-form-urlencoded")]),t("a-radio",{attrs:{value:"form-data"}},[e._v("form-data")]),t("a-radio",{attrs:{value:"raw"}},[e._v("raw")])],1)],1),t("div",{staticClass:"knife4j-debug-request-content-type-float"},[t("div",{staticClass:"knife4j-debug-request-content-type-raw"},[e.rawTypeFlag?t("a-dropdown",{attrs:{trigger:["click"]}},[t("span",{staticClass:"knife4j-debug-raw-span"},[t("span",[e._v(e._s(e.rawDefaultText))]),t("a-icon",{attrs:{type:"down"}})],1),t("a-menu",{attrs:{slot:"overlay"},on:{click:e.rawMenuClick},slot:"overlay"},[t("a-menu-item",{key:"Auto",attrs:{"data-mode-type":"application/json","data-mode":"text"}},[e._v("Auto")]),t("a-menu-item",{key:"Text(text/plain)",attrs:{"data-mode-type":"text/plain","data-mode":"text"}},[e._v(" Text(text/plain)")]),t("a-menu-item",{key:"JSON(application/json)",attrs:{"data-mode-type":"application/json","data-mode":"json"}},[e._v(" JSON(application/json)")]),t("a-menu-item",{key:"Javascript(application/Javascript)",attrs:{"data-mode-type":"application/javascript","data-mode":"javascript"}},[e._v("Javascript(application/Javascript)")]),t("a-menu-item",{key:"XML(application/xml)",attrs:{"data-mode-type":"application/xml","data-mode":"xml"}},[e._v(" XML(application/xml)")]),t("a-menu-item",{key:"XML(text/xml)",attrs:{"data-mode-type":"text/xml","data-mode":"xml"}},[e._v("XML(text/xml) ")]),t("a-menu-item",{key:"HTML(text/html)",attrs:{"data-mode-type":"text/html","data-mode":"html"}},[e._v("HTML(text/html) ")])],1)],1):e._e()],1)]),e.formatFlag?t("div",{staticClass:"knife4j-debug-request-content-type-beautify"},[t("a",{on:{click:e.beautifyJson}},[e._v("Beautify")])]):e._e()]),e.formFlag?t("a-row",[e.formTableFlag?t("a-table",{attrs:{bordered:"",size:"small",rowSelection:e.rowFormSelection,columns:e.formColumn,pagination:e.pagination,dataSource:e.formData,rowKey:"id"},scopedSlots:e._u([{key:"formName",fn:function(a,r){return[t("a-input",{attrs:{placeholder:r.description,"data-key":r.id,defaultValue:a},on:{change:e.formNameChange}})]}},{key:"formType",fn:function(a,r){return[t("a-select",{staticStyle:{width:"100%"},attrs:{defaultValue:a+"-"+r.id},on:{change:e.formTypeChange}},[t("a-select-option",{attrs:{value:"text-"+r.id}},[t("span",{domProps:{innerHTML:e._s(e.$t("debug.form.itemText"))}},[e._v("文本")])]),t("a-select-option",{attrs:{value:"file-"+r.id}},[t("span",{domProps:{innerHTML:e._s(e.$t("debug.form.itemFile"))}},[e._v("文件")])])],1)]}},{key:"formValue",fn:function(a,r){return["text"==r.type?t("div",[null!=r.enums?t("a-row",[t("a-select",{staticStyle:{width:"100%"},attrs:{mode:r.enumsMode,defaultValue:a,"data-key":r.id,options:r.enums},on:{change:e.formContentEnumChange}})],1):t("a-row",[t("a-input",{class:"knife4j-debug-param-require"+r.require,attrs:{placeholder:r.description,"data-key":r.id,defaultValue:a},on:{change:e.formContentChange}})],1)],1):t("div",[t("div",[r.multipart?t("div",{staticStyle:{display:"none"}},[t("input",{staticStyle:{display:"none"},attrs:{id:"file"+r.id,multiple:"",type:"file","data-key":r.id},on:{change:e.formFileChange}})]):t("div",{staticStyle:{display:"none"}},[t("input",{staticStyle:{display:"none"},attrs:{id:"file"+r.id,type:"file","data-key":r.id},on:{change:e.formFileChange}})]),t("a-input-group",{attrs:{compact:""}},[t("a-input",{class:"knife4j-debug-param-require"+r.require,staticStyle:{width:"80%"},attrs:{value:r.content,disabled:""}}),t("a-button",{staticClass:"knife4j-api-send",staticStyle:{width:"80px"},attrs:{type:"primary"},domProps:{innerHTML:e._s(e.$t("debug.form.upload"))},on:{click:function(t){return e.formFileUploadClick(r)}}},[e._v("选择文件")])],1)],1)])]}},{key:"operation",fn:function(a,r){return t("a-row",{},[r.new?e._e():t("a-button",{attrs:{type:"link"},domProps:{innerHTML:e._s(e.$t("debug.tableHeader.holderDel"))},on:{click:function(t){return e.formDelete(r)}}},[e._v("删除")])],1)}}],null,!1,2148726805)}):e._e()],1):e._e(),e.urlFormFlag?t("a-row",[e.urlFormTableFlag?t("a-table",{attrs:{bordered:"",size:"small",rowSelection:e.rowUrlFormSelection,columns:e.urlFormColumn,pagination:e.pagination,dataSource:e.urlFormData,rowKey:"id"},scopedSlots:e._u([{key:"urlFormName",fn:function(a,r){return[t("a-input",{attrs:{placeholder:r.description,"data-key":r.id,defaultValue:a},on:{change:e.urlFormNameChange}})]}},{key:"urlFormValue",fn:function(a,r){return[null!=r.enums?t("a-row",[t("a-select",{staticStyle:{width:"100%"},attrs:{mode:r.enumsMode,defaultValue:a,"data-key":r.id,options:r.enums},on:{change:e.urlFormContentEnumChange}})],1):t("a-row",[t("a-input",{class:"knife4j-debug-param-require"+r.require,attrs:{placeholder:r.description,"data-key":r.id,defaultValue:a},on:{change:e.urlFormContentChange}})],1)]}},{key:"operation",fn:function(a,r){return t("a-row",{},[r.new?e._e():t("a-button",{attrs:{type:"link"},domProps:{innerHTML:e._s(e.$t("debug.tableHeader.holderDel"))},on:{click:function(t){return e.urlFormDelete(r)}}},[e._v("删除")])],1)}}],null,!1,942578135)}):e._e()],1):e._e(),e.rawFlag?t("a-row",[e.rawFormFlag?t("a-row",[e.rawFormTableFlag?t("a-table",{attrs:{bordered:"",size:"small",rowSelection:e.rowRawFormSelection,columns:e.urlFormColumn,pagination:e.pagination,dataSource:e.rawFormData,rowKey:"id"},scopedSlots:e._u([{key:"urlFormName",fn:function(a,r){return[t("a-input",{attrs:{placeholder:r.description,"data-key":r.id,defaultValue:a},on:{change:e.rawFormNameChange}})]}},{key:"urlFormValue",fn:function(a,r){return[null!=r.enums?t("a-row",[t("a-select",{staticStyle:{width:"100%"},attrs:{mode:r.enumsMode,defaultValue:a,"data-key":r.id,options:r.enums},on:{change:e.rawFormContentEnumChange}})],1):t("a-row",[t("a-input",{class:"knife4j-debug-param-require"+r.require,attrs:{placeholder:r.description,"data-key":r.id,defaultValue:a},on:{change:e.rawFormContentChange}})],1)]}},{key:"operation",fn:function(a,r){return t("a-row",{},[r.new?e._e():t("a-button",{attrs:{type:"link"},domProps:{innerHTML:e._s(e.$t("debug.tableHeader.holderDel"))},on:{click:function(t){return e.rawFormDelete(r)}}},[e._v("删除")])],1)}}],null,!1,2757824471)}):e._e()],1):e._e(),t("editor-debug-show",{staticStyle:{"margin-top":"5px"},attrs:{value:e.rawText,mode:e.rawMode},on:{change:e.rawChange}})],1):e._e()],1),e.enableAfterScript?t("a-tab-pane",{key:"3",attrs:{tab:"AfterScript"}},[t("a-row",{staticStyle:{height:"25px","line-height":"25px"}},[e._v(" 关于AfterScript更详细的使用方法及介绍,请"),t("a",{attrs:{href:"https://gitee.com/xiaoym/knife4j/wikis/AfterScript",target:"_blank"}},[e._v("参考文档")])]),t("a-row",[t("editor-script",{staticStyle:{"margin-top":"5px"},attrs:{value:e.rawScript},on:{change:e.rawScriptChange}})],1)],1):e._e()],1)],1),t("a-row",[t("DebugResponse",{ref:"childDebugResponse",attrs:{responseFieldDescriptionChecked:e.responseFieldDescriptionChecked,swaggerInstance:e.swaggerInstance,api:e.api,debugSend:e.debugSend,responseContent:e.responseContent,responseCurlText:e.responseCurlText,responseStatus:e.responseStatus,responseRawText:e.responseRawText,responseHeaders:e.responseHeaders},on:{debugShowFieldDescriptionChange:e.debugShowFieldDescriptionChange,debugEditorChange:e.debugEditorChange}})],1)],1)])],1)}),[],!1,null,null,null);t.default=k.exports},b680:function(e,t,a){"use strict";var r=a("23e7"),n=a("e330"),i=a("5926"),o=a("408a"),s=a("1148"),l=a("d039"),u=RangeError,d=String,c=Math.floor,h=n(s),m=n("".slice),p=n(1..toFixed),f=function(e,t,a){return 0===t?a:t%2==1?f(e,t-1,a*e):f(e*e,t/2,a)},g=function(e,t,a){for(var r=-1,n=a;++r<6;)n+=t*e[r],e[r]=n%1e7,n=c(n/1e7)},w=function(e,t){for(var a=6,r=0;--a>=0;)r+=e[a],e[a]=c(r/t),r=r%t*1e7},b=function(e){for(var t=6,a="";--t>=0;)if(""!==a||0===t||0!==e[t]){var r=d(e[t]);a=""===a?r:a+h("0",7-r.length)+r}return a};r({target:"Number",proto:!0,forced:l((function(){return"0.000"!==p(8e-5,3)||"1"!==p(.9,0)||"1.25"!==p(1.255,2)||"1000000000000000128"!==p(0xde0b6b3a7640080,0)}))||!l((function(){p({})}))},{toFixed:function(e){var t,a,r,n,s=o(this),l=i(e),c=[0,0,0,0,0,0],p="",v="0";if(l<0||l>20)throw u("Incorrect fraction digits");if(s!=s)return"NaN";if(s<=-1e21||s>=1e21)return d(s);if(s<0&&(p="-",s=-s),s>1e-21)if(t=function(e){for(var t=0,a=e;a>=4096;)t+=12,a/=4096;for(;a>=2;)t+=1,a/=2;return t}(s*f(2,69,1))-69,a=t<0?s*f(2,-t,1):s/f(2,t,1),a*=4503599627370496,(t=52-t)>0){for(g(c,0,a),r=l;r>=7;)g(c,1e7,0),r-=7;for(g(c,f(10,r,1),0),r=t-1;r>=23;)w(c,1<<23),r-=23;w(c,1<<r),g(c,1,1),w(c,2),v=b(c)}else g(c,0,a),g(c,1<<-t,0),v=b(c)+h("0",l);return l>0?v=p+((n=v.length)<=l?"0."+h("0",l-n)+v:m(v,0,n-l)+"."+m(v,n-l)):v=p+v,v}})}}]);")))
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}
}